"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "../core-detect/dist/presets.js":
/*!**************************************!*\
  !*** ../core-detect/dist/presets.js ***!
  \**************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PRESETS: function() { return /* binding */ PRESETS; },\n/* harmony export */   createPreset: function() { return /* binding */ createPreset; },\n/* harmony export */   deletePreset: function() { return /* binding */ deletePreset; },\n/* harmony export */   duplicatePreset: function() { return /* binding */ duplicatePreset; },\n/* harmony export */   exportAllUserPresets: function() { return /* binding */ exportAllUserPresets; },\n/* harmony export */   exportPreset: function() { return /* binding */ exportPreset; },\n/* harmony export */   getPreset: function() { return /* binding */ getPreset; },\n/* harmony export */   importMultiplePresets: function() { return /* binding */ importMultiplePresets; },\n/* harmony export */   importPreset: function() { return /* binding */ importPreset; },\n/* harmony export */   listBuiltinPresets: function() { return /* binding */ listBuiltinPresets; },\n/* harmony export */   listPresets: function() { return /* binding */ listPresets; },\n/* harmony export */   listPresetsByDomain: function() { return /* binding */ listPresetsByDomain; },\n/* harmony export */   listUserPresets: function() { return /* binding */ listUserPresets; },\n/* harmony export */   resetUserPresets: function() { return /* binding */ resetUserPresets; },\n/* harmony export */   savePreset: function() { return /* binding */ savePreset; },\n/* harmony export */   validatePreset: function() { return /* binding */ validatePreset; }\n/* harmony export */ });\n// Predefined presets.  These can be customised by the user at runtime via the UI.\nconst PRESETS = [\n    {\n        id: 'developer',\n        name: 'Developer Secrets',\n        description: 'Detects technical secrets like API keys, tokens, and database credentials',\n        domain: 'Technology',\n        enabledKinds: ['EMAIL', 'PHONE', 'PAN', 'JWT', 'API_KEY', 'IBAN', 'SSN', 'PASSPORT'],\n        styleMap: {\n            'JWT': 'BOX',\n            'API_KEY': 'BOX',\n            'EMAIL': 'BLUR',\n            'PHONE': 'PIXELATE'\n        },\n        defaultRedactionConfig: {\n            color: '#ff0000',\n            opacity: 0.8\n        },\n        confidenceThreshold: 0.7,\n        customRegex: [],\n        version: '1.0.0'\n    },\n    {\n        id: 'work',\n        name: 'Work Screenshot',\n        description: 'Professional document sanitization for workplace sharing',\n        domain: 'General',\n        enabledKinds: ['EMAIL', 'PHONE', 'PAN', 'JWT', 'API_KEY', 'NAME', 'ADDRESS', 'PASSPORT'],\n        styleMap: {\n            'NAME': 'LABEL',\n            'EMAIL': 'BLUR',\n            'PHONE': 'MASK_LAST4',\n            'ADDRESS': 'BOX'\n        },\n        defaultRedactionConfig: {\n            color: '#000000',\n            opacity: 1.0,\n            labelText: '[REDACTED]'\n        },\n        confidenceThreshold: 0.6,\n        customRegex: [],\n        version: '1.0.0'\n    },\n    {\n        id: 'all',\n        name: 'All Detectors',\n        description: 'Maximum security - detects all types of sensitive information',\n        domain: 'General',\n        enabledKinds: ['FACE', 'EMAIL', 'PHONE', 'PAN', 'IBAN', 'SSN', 'PASSPORT', 'JWT', 'API_KEY', 'BARCODE', 'NAME', 'ADDRESS', 'OTHER'],\n        styleMap: {},\n        defaultRedactionConfig: {\n            color: '#000000',\n            opacity: 0.9\n        },\n        confidenceThreshold: 0.5,\n        customRegex: [],\n        version: '1.0.0'\n    },\n    // Domain-specific preset templates\n    {\n        id: 'healthcare',\n        name: 'Healthcare (HIPAA)',\n        description: 'HIPAA-compliant sanitization for medical documents and communications',\n        domain: 'Healthcare',\n        enabledKinds: ['NAME', 'SSN', 'PHONE', 'EMAIL', 'ADDRESS', 'OTHER'],\n        styleMap: {\n            'SSN': 'BOX',\n            'NAME': 'LABEL',\n            'PHONE': 'MASK_LAST4',\n            'EMAIL': 'BLUR',\n            'ADDRESS': 'BOX'\n        },\n        customPatterns: [\n            {\n                id: 'mrn',\n                name: 'Medical Record Number',\n                pattern: '\\\\b(MRN|Medical Record|Patient ID)\\\\s*:?\\\\s*([A-Z0-9]{6,12})\\\\b',\n                kind: 'OTHER',\n                confidence: 0.9,\n                description: 'Medical record numbers and patient identifiers',\n                caseSensitive: false\n            },\n            {\n                id: 'dob',\n                name: 'Date of Birth',\n                pattern: '\\\\b(DOB|Date of Birth|Born)\\\\s*:?\\\\s*(\\\\d{1,2}[/-]\\\\d{1,2}[/-]\\\\d{2,4})\\\\b',\n                kind: 'OTHER',\n                confidence: 0.8,\n                description: 'Date of birth patterns',\n                caseSensitive: false\n            }\n        ],\n        defaultRedactionConfig: {\n            color: '#000000',\n            opacity: 1.0,\n            labelText: '[PHI REDACTED]'\n        },\n        confidenceThreshold: 0.8,\n        version: '1.0.0'\n    },\n    {\n        id: 'finance',\n        name: 'Financial Services',\n        description: 'Financial document sanitization including PCI DSS compliance',\n        domain: 'Finance',\n        enabledKinds: ['PAN', 'IBAN', 'SSN', 'NAME', 'PHONE', 'EMAIL', 'ADDRESS'],\n        styleMap: {\n            'PAN': 'MASK_LAST4',\n            'IBAN': 'MASK_LAST4',\n            'SSN': 'BOX',\n            'NAME': 'LABEL',\n            'PHONE': 'PIXELATE',\n            'EMAIL': 'BLUR'\n        },\n        customPatterns: [\n            {\n                id: 'account_number',\n                name: 'Account Number',\n                pattern: '\\\\b(Account|Acct)\\\\s*#?:?\\\\s*([0-9]{8,16})\\\\b',\n                kind: 'PAN',\n                confidence: 0.85,\n                description: 'Bank account numbers',\n                caseSensitive: false\n            },\n            {\n                id: 'routing_number',\n                name: 'Routing Number',\n                pattern: '\\\\b(Routing|ABA)\\\\s*#?:?\\\\s*([0-9]{9})\\\\b',\n                kind: 'OTHER',\n                confidence: 0.9,\n                description: 'Bank routing numbers',\n                caseSensitive: false\n            }\n        ],\n        defaultRedactionConfig: {\n            color: '#000000',\n            opacity: 0.95,\n            labelText: '[FINANCIAL INFO]'\n        },\n        confidenceThreshold: 0.75,\n        version: '1.0.0'\n    },\n    {\n        id: 'legal',\n        name: 'Legal Documents',\n        description: 'Attorney-client privilege and legal document sanitization',\n        domain: 'Legal',\n        enabledKinds: ['NAME', 'SSN', 'PHONE', 'EMAIL', 'ADDRESS', 'OTHER'],\n        styleMap: {\n            'NAME': 'LABEL',\n            'SSN': 'BOX',\n            'PHONE': 'BLUR',\n            'EMAIL': 'BLUR',\n            'ADDRESS': 'LABEL'\n        },\n        customPatterns: [\n            {\n                id: 'case_number',\n                name: 'Case Number',\n                pattern: '\\\\b(Case|Cause|Docket)\\\\s*(No\\\\.?|Number|#)\\\\s*:?\\\\s*([A-Z0-9-]{6,20})\\\\b',\n                kind: 'OTHER',\n                confidence: 0.9,\n                description: 'Legal case and docket numbers',\n                caseSensitive: false\n            },\n            {\n                id: 'bar_number',\n                name: 'Bar Number',\n                pattern: '\\\\b(Bar|Attorney)\\\\s*(No\\\\.?|Number|#)\\\\s*:?\\\\s*([A-Z0-9]{5,12})\\\\b',\n                kind: 'OTHER',\n                confidence: 0.85,\n                description: 'Attorney bar numbers',\n                caseSensitive: false\n            }\n        ],\n        defaultRedactionConfig: {\n            color: '#000000',\n            opacity: 1.0,\n            labelText: '[CONFIDENTIAL]'\n        },\n        confidenceThreshold: 0.7,\n        version: '1.0.0'\n    }\n];\n// Local storage key for user presets\nconst USER_PRESETS_KEY = 'cleanshare_user_presets';\n// Load user presets from localStorage on startup\nlet userPresets = [];\ntry {\n    if (typeof localStorage !== 'undefined') {\n        const stored = localStorage.getItem(USER_PRESETS_KEY);\n        if (stored) {\n            userPresets = JSON.parse(stored);\n        }\n    }\n}\ncatch (error) {\n    console.warn('Failed to load user presets from localStorage:', error);\n}\n/** Return all registered presets (built-in + user-created). */\nfunction listPresets() {\n    return [...PRESETS, ...userPresets];\n}\n/** Return only built-in presets. */\nfunction listBuiltinPresets() {\n    return PRESETS.slice();\n}\n/** Return only user-created presets. */\nfunction listUserPresets() {\n    return userPresets.slice();\n}\n/** Return presets filtered by domain. */\nfunction listPresetsByDomain(domain) {\n    return listPresets().filter(p => p.domain === domain);\n}\n/** Lookup a preset by its ID. */\nfunction getPreset(id) {\n    return listPresets().find(p => p.id === id);\n}\n/** Generate a unique preset ID */\nfunction generatePresetId() {\n    return `preset_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n}\n/** Save user presets to localStorage */\nfunction saveUserPresetsToStorage() {\n    try {\n        if (typeof localStorage !== 'undefined') {\n            localStorage.setItem(USER_PRESETS_KEY, JSON.stringify(userPresets));\n        }\n    }\n    catch (error) {\n        console.warn('Failed to save user presets to localStorage:', error);\n    }\n}\n/** Save or update a preset.  If the ID exists, it will be replaced; otherwise it is added. */\nfunction savePreset(preset) {\n    // Ensure preset has required metadata\n    const now = new Date().toISOString();\n    const enhancedPreset = {\n        ...preset,\n        id: preset.id || generatePresetId(),\n        isUserCreated: true,\n        updatedAt: now,\n        createdAt: preset.createdAt || now,\n        version: preset.version || '1.0.0'\n    };\n    // Check if it's a built-in preset\n    const builtinIndex = PRESETS.findIndex(p => p.id === enhancedPreset.id);\n    if (builtinIndex >= 0) {\n        // Don't allow overwriting built-in presets, create a copy instead\n        enhancedPreset.id = generatePresetId();\n        enhancedPreset.name = `${enhancedPreset.name} (Custom)`;\n    }\n    // Save to user presets\n    const userIndex = userPresets.findIndex(p => p.id === enhancedPreset.id);\n    if (userIndex >= 0) {\n        userPresets[userIndex] = enhancedPreset;\n    }\n    else {\n        userPresets.push(enhancedPreset);\n    }\n    saveUserPresetsToStorage();\n}\n/** Create a new preset from scratch */\nfunction createPreset(name, options = {}) {\n    const preset = {\n        id: generatePresetId(),\n        name,\n        description: options.description || '',\n        domain: options.domain || 'General',\n        enabledKinds: options.enabledKinds || [],\n        styleMap: options.styleMap || {},\n        customRegex: options.customRegex || [],\n        customPatterns: options.customPatterns || [],\n        defaultRedactionConfig: options.defaultRedactionConfig || {\n            color: '#000000',\n            opacity: 0.9\n        },\n        confidenceThreshold: options.confidenceThreshold || 0.6,\n        isUserCreated: true,\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString(),\n        version: '1.0.0'\n    };\n    savePreset(preset);\n    return preset;\n}\n/** Duplicate an existing preset */\nfunction duplicatePreset(id, newName) {\n    const original = getPreset(id);\n    if (!original)\n        return undefined;\n    const preset = {\n        ...original,\n        id: generatePresetId(),\n        name: newName || `${original.name} (Copy)`,\n        isUserCreated: true,\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n    };\n    savePreset(preset);\n    return preset;\n}\n/** Delete a preset by its ID.  Built-in presets cannot be deleted. */\nfunction deletePreset(id) {\n    // Don't allow deleting built-in presets\n    const isBuiltin = PRESETS.some(p => p.id === id);\n    if (isBuiltin)\n        return false;\n    const index = userPresets.findIndex(p => p.id === id);\n    if (index >= 0) {\n        userPresets.splice(index, 1);\n        saveUserPresetsToStorage();\n        return true;\n    }\n    return false;\n}\n/** Validate a preset object */\nfunction validatePreset(preset) {\n    const errors = [];\n    const warnings = [];\n    // Required fields\n    if (!preset.id || typeof preset.id !== 'string') {\n        errors.push('Preset must have a valid ID');\n    }\n    if (!preset.name || typeof preset.name !== 'string') {\n        errors.push('Preset must have a valid name');\n    }\n    if (!Array.isArray(preset.enabledKinds)) {\n        errors.push('Preset must have an enabledKinds array');\n    }\n    // Validate detection kinds\n    const validKinds = ['FACE', 'EMAIL', 'PHONE', 'PAN', 'IBAN', 'SSN', 'PASSPORT', 'JWT', 'API_KEY', 'BARCODE', 'NAME', 'ADDRESS', 'OTHER'];\n    if (preset.enabledKinds) {\n        const invalidKinds = preset.enabledKinds.filter((kind) => !validKinds.includes(kind));\n        if (invalidKinds.length > 0) {\n            warnings.push(`Unknown detection kinds: ${invalidKinds.join(', ')}`);\n        }\n    }\n    // Validate custom patterns\n    if (preset.customPatterns && Array.isArray(preset.customPatterns)) {\n        preset.customPatterns.forEach((pattern, index) => {\n            if (!pattern.id || !pattern.name || !pattern.pattern) {\n                errors.push(`Custom pattern ${index + 1} is missing required fields (id, name, pattern)`);\n            }\n            if (pattern.pattern) {\n                try {\n                    new RegExp(pattern.pattern);\n                }\n                catch (error) {\n                    errors.push(`Custom pattern ${index + 1} has invalid regex: ${pattern.pattern}`);\n                }\n            }\n        });\n    }\n    // Validate confidence threshold\n    if (preset.confidenceThreshold !== undefined) {\n        if (typeof preset.confidenceThreshold !== 'number' || preset.confidenceThreshold < 0 || preset.confidenceThreshold > 1) {\n            warnings.push('Confidence threshold should be a number between 0 and 1');\n        }\n    }\n    return {\n        success: errors.length === 0,\n        preset: errors.length === 0 ? preset : undefined,\n        errors,\n        warnings\n    };\n}\n/** Import a preset from JSON */\nfunction importPreset(json) {\n    try {\n        const data = JSON.parse(json);\n        const validation = validatePreset(data);\n        if (validation.success && validation.preset) {\n            // Check for ID conflicts and generate new ID if needed\n            const existingPreset = getPreset(validation.preset.id);\n            if (existingPreset) {\n                validation.preset.id = generatePresetId();\n                validation.preset.name = `${validation.preset.name} (Imported)`;\n                validation.warnings.push('Preset ID already exists, generated new ID');\n            }\n            // Mark as user-created and update timestamps\n            validation.preset.isUserCreated = true;\n            validation.preset.createdAt = new Date().toISOString();\n            validation.preset.updatedAt = new Date().toISOString();\n            savePreset(validation.preset);\n        }\n        return validation;\n    }\n    catch (error) {\n        return {\n            success: false,\n            errors: [`Invalid JSON: ${error instanceof Error ? error.message : 'Unknown error'}`],\n            warnings: []\n        };\n    }\n}\n/** Export a preset to JSON */\nfunction exportPreset(id, options = {}) {\n    const preset = getPreset(id);\n    if (!preset)\n        return null;\n    const exportData = { ...preset };\n    // Remove metadata if requested\n    if (!options.includeMetadata) {\n        delete exportData.createdAt;\n        delete exportData.updatedAt;\n        delete exportData.isUserCreated;\n    }\n    if (options.format === 'compact') {\n        return JSON.stringify(exportData);\n    }\n    else {\n        return JSON.stringify(exportData, null, 2);\n    }\n}\n/** Export all user presets */\nfunction exportAllUserPresets(options = {}) {\n    const presets = listUserPresets();\n    const exportData = presets.map(preset => {\n        const data = { ...preset };\n        if (!options.includeMetadata) {\n            delete data.createdAt;\n            delete data.updatedAt;\n            delete data.isUserCreated;\n        }\n        return data;\n    });\n    if (options.format === 'compact') {\n        return JSON.stringify(exportData);\n    }\n    else {\n        return JSON.stringify(exportData, null, 2);\n    }\n}\n/** Import multiple presets from JSON array */\nfunction importMultiplePresets(json) {\n    try {\n        const data = JSON.parse(json);\n        if (!Array.isArray(data)) {\n            return [{\n                    success: false,\n                    errors: ['Expected JSON array of presets'],\n                    warnings: []\n                }];\n        }\n        return data.map(presetData => importPreset(JSON.stringify(presetData)));\n    }\n    catch (error) {\n        return [{\n                success: false,\n                errors: [`Invalid JSON: ${error instanceof Error ? error.message : 'Unknown error'}`],\n                warnings: []\n            }];\n    }\n}\n/** Reset all user presets (clear localStorage) */\nfunction resetUserPresets() {\n    userPresets = [];\n    saveUserPresetsToStorage();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../core-detect/dist/presets.js\n"));

/***/ })

});