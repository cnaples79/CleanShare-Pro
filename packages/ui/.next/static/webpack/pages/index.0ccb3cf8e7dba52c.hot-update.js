"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "../core-detect/dist/pipeline/apply.js":
/*!*********************************************!*\
  !*** ../core-detect/dist/pipeline/apply.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   analyzeDocument: function() { return /* binding */ analyzeDocument; },\n/* harmony export */   applyRedactions: function() { return /* binding */ applyRedactions; }\n/* harmony export */ });\n/* harmony import */ var _analyze__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./analyze */ \"../core-detect/dist/pipeline/analyze.js\");\n/* harmony import */ var pdf_lib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! pdf-lib */ \"../../node_modules/.pnpm/pdf-lib@1.17.1/node_modules/pdf-lib/es/index.js\");\n/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"../../node_modules/.pnpm/next@14.1.0_@babel+core@7.28.3_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/next/dist/compiled/buffer/index.js\")[\"Buffer\"];\n\n\n// A moduleâ€‘scoped variable to store the last analysis result.  applyRedactions()\n// uses this map to resolve detection IDs to bounding boxes.  In a real\n// application you should pass the detections directly to avoid shared\n// mutable state.  This simplified implementation is sufficient for the\n// demonstration.\nlet lastResult = null;\n/** Override the exported analyse function to capture the last result. */\nasync function analyzeDocument(file, opts = {}) {\n    const result = await (0,_analyze__WEBPACK_IMPORTED_MODULE_1__.analyzeDocument)(file, opts);\n    lastResult = result;\n    return result;\n}\n/** Internal helper: convert a canvas to a data URI. */\nfunction canvasToDataURL(canvas, mimeType = 'image/png', quality = 0.92) {\n    return canvas.toDataURL(mimeType, quality);\n}\n/** Internal helper: convert a File/Blob into a HTMLImageElement. */\nasync function fileToImage(file) {\n    const dataURL = await new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onload = () => resolve(reader.result);\n        reader.onerror = () => reject(reader.error);\n        reader.readAsDataURL(file);\n    });\n    const img = new Image();\n    await new Promise(resolve => {\n        img.onload = () => resolve();\n        img.src = dataURL;\n    });\n    return img;\n}\n/** Apply redactions to an image.  Returns a Data URI. */\nasync function applyRedactionsToImage(file, actions, quality = 0.92, detectionResult) {\n    const img = await fileToImage(file);\n    const canvas = document.createElement('canvas');\n    canvas.width = img.width;\n    canvas.height = img.height;\n    const ctx = canvas.getContext('2d');\n    if (!ctx)\n        throw new Error('Cannot obtain 2D context');\n    // Draw original image\n    ctx.drawImage(img, 0, 0);\n    // Build detection map\n    const map = new Map();\n    const detectionsToUse = detectionResult || lastResult;\n    if (detectionsToUse) {\n        for (const det of detectionsToUse.detections) {\n            map.set(det.id, det);\n        }\n    }\n    // Utility helpers for drawing various redaction styles on images\n    function drawBox(x, y, w, h, config = {}) {\n        var _a;\n        const color = config.color || 'black';\n        const opacity = (_a = config.opacity) !== null && _a !== void 0 ? _a : 1.0;\n        const cornerRadius = config.cornerRadius || 0;\n        ctx.save();\n        ctx.globalAlpha = opacity;\n        ctx.fillStyle = color;\n        if (cornerRadius > 0) {\n            // Draw rounded rectangle\n            ctx.beginPath();\n            ctx.roundRect(x, y, w, h, cornerRadius);\n            ctx.fill();\n        }\n        else {\n            ctx.fillRect(x, y, w, h);\n        }\n        // Add border if specified\n        if (config.borderWidth && config.borderColor) {\n            ctx.lineWidth = config.borderWidth;\n            ctx.strokeStyle = config.borderColor;\n            if (cornerRadius > 0) {\n                ctx.beginPath();\n                ctx.roundRect(x, y, w, h, cornerRadius);\n                ctx.stroke();\n            }\n            else {\n                ctx.strokeRect(x, y, w, h);\n            }\n        }\n        ctx.restore();\n    }\n    // Enhanced solid color redaction with configuration support\n    function drawSolidColor(x, y, w, h, config = {}) {\n        drawBox(x, y, w, h, config);\n    }\n    // Gradient redaction\n    function drawGradient(x, y, w, h, config = {}) {\n        var _a;\n        const color1 = config.color || 'black';\n        const color2 = config.secondaryColor || 'gray';\n        const opacity = (_a = config.opacity) !== null && _a !== void 0 ? _a : 1.0;\n        ctx.save();\n        ctx.globalAlpha = opacity;\n        const gradient = ctx.createLinearGradient(x, y, x + w, y + h);\n        gradient.addColorStop(0, color1);\n        gradient.addColorStop(1, color2);\n        ctx.fillStyle = gradient;\n        if (config.cornerRadius && config.cornerRadius > 0) {\n            ctx.beginPath();\n            ctx.roundRect(x, y, w, h, config.cornerRadius);\n            ctx.fill();\n        }\n        else {\n            ctx.fillRect(x, y, w, h);\n        }\n        ctx.restore();\n    }\n    // Pattern redaction\n    function drawPattern(x, y, w, h, config = {}) {\n        var _a;\n        const color = config.color || 'black';\n        const opacity = (_a = config.opacity) !== null && _a !== void 0 ? _a : 1.0;\n        const patternType = config.patternType || 'diagonal';\n        ctx.save();\n        ctx.globalAlpha = opacity;\n        // Fill background first\n        ctx.fillStyle = config.secondaryColor || '#f0f0f0';\n        ctx.fillRect(x, y, w, h);\n        // Draw pattern\n        ctx.strokeStyle = color;\n        ctx.lineWidth = 2;\n        switch (patternType) {\n            case 'diagonal':\n                for (let i = -h; i < w + h; i += 8) {\n                    ctx.beginPath();\n                    ctx.moveTo(x + i, y);\n                    ctx.lineTo(x + i + h, y + h);\n                    ctx.stroke();\n                }\n                break;\n            case 'dots':\n                const dotSize = 3;\n                const spacing = 8;\n                ctx.fillStyle = color;\n                for (let dx = 0; dx < w; dx += spacing) {\n                    for (let dy = 0; dy < h; dy += spacing) {\n                        ctx.beginPath();\n                        ctx.arc(x + dx + spacing / 2, y + dy + spacing / 2, dotSize / 2, 0, Math.PI * 2);\n                        ctx.fill();\n                    }\n                }\n                break;\n            case 'cross-hatch':\n                // Diagonal lines one way\n                for (let i = -h; i < w + h; i += 6) {\n                    ctx.beginPath();\n                    ctx.moveTo(x + i, y);\n                    ctx.lineTo(x + i + h, y + h);\n                    ctx.stroke();\n                }\n                // Diagonal lines the other way\n                for (let i = 0; i < w + h; i += 6) {\n                    ctx.beginPath();\n                    ctx.moveTo(x + i, y + h);\n                    ctx.lineTo(x + i - h, y);\n                    ctx.stroke();\n                }\n                break;\n            case 'waves':\n                ctx.beginPath();\n                for (let i = 0; i < w; i += 2) {\n                    const wave = Math.sin((i / w) * Math.PI * 4) * (h * 0.2);\n                    if (i === 0) {\n                        ctx.moveTo(x + i, y + h / 2 + wave);\n                    }\n                    else {\n                        ctx.lineTo(x + i, y + h / 2 + wave);\n                    }\n                }\n                ctx.stroke();\n                break;\n            case 'noise':\n                ctx.fillStyle = color;\n                for (let i = 0; i < w * h / 20; i++) {\n                    const nx = x + Math.random() * w;\n                    const ny = y + Math.random() * h;\n                    ctx.beginPath();\n                    ctx.arc(nx, ny, 1, 0, Math.PI * 2);\n                    ctx.fill();\n                }\n                break;\n        }\n        ctx.restore();\n    }\n    // Apply a CSS blur filter to a region by drawing the original image with\n    // the filter enabled only for that region.  Canvas 2D `filter` is\n    // supported in modern browsers.  We temporarily clip the context to\n    // restrict the blur effect to the redaction box.\n    function drawBlur(x, y, w, h) {\n        ctx.save();\n        ctx.filter = 'blur(8px)';\n        ctx.beginPath();\n        ctx.rect(x, y, w, h);\n        ctx.clip();\n        ctx.drawImage(img, 0, 0);\n        ctx.restore();\n    }\n    // Pixelate by drawing the region scaled down and back up.  Choose a\n    // pixel size relative to region size to maintain some obfuscation but\n    // not degrade performance too much.\n    function drawPixelate(x, y, w, h) {\n        const pixelSize = Math.max(4, Math.floor(Math.min(w, h) / 10));\n        // Create a temporary canvas to hold the region scaled down\n        const tempCanvas = document.createElement('canvas');\n        tempCanvas.width = Math.max(1, Math.floor(w / pixelSize));\n        tempCanvas.height = Math.max(1, Math.floor(h / pixelSize));\n        const tctx = tempCanvas.getContext('2d');\n        if (!tctx) {\n            drawBox(x, y, w, h);\n            return;\n        }\n        // Draw the region scaled down onto the temp canvas\n        tctx.drawImage(img, x, y, w, h, 0, 0, tempCanvas.width, tempCanvas.height);\n        // Now draw the scaled up version onto the main canvas to pixelate\n        ctx.imageSmoothingEnabled = false;\n        ctx.drawImage(tempCanvas, 0, 0, tempCanvas.width, tempCanvas.height, x, y, w, h);\n        ctx.imageSmoothingEnabled = true;\n    }\n    // Enhanced label drawing with configuration support\n    function drawLabel(x, y, w, h, text, config = {}) {\n        var _a;\n        ctx.save();\n        const bgColor = config.color || 'black';\n        const textColor = config.secondaryColor || 'white';\n        const opacity = (_a = config.opacity) !== null && _a !== void 0 ? _a : 1.0;\n        const fontSize = config.fontSize || Math.max(10, Math.floor(h * 0.6));\n        const fontFamily = config.fontFamily || 'sans-serif';\n        const cornerRadius = config.cornerRadius || 0;\n        ctx.globalAlpha = opacity;\n        // Draw background with optional rounded corners\n        ctx.fillStyle = bgColor;\n        if (cornerRadius > 0) {\n            ctx.beginPath();\n            ctx.roundRect(x, y, w, h, cornerRadius);\n            ctx.fill();\n        }\n        else {\n            ctx.fillRect(x, y, w, h);\n        }\n        // Add shadow if specified\n        if (config.shadow) {\n            ctx.shadowOffsetX = config.shadow.offsetX;\n            ctx.shadowOffsetY = config.shadow.offsetY;\n            ctx.shadowBlur = config.shadow.blur;\n            ctx.shadowColor = config.shadow.color;\n        }\n        // Draw text\n        ctx.fillStyle = textColor;\n        ctx.font = `${fontSize}px ${fontFamily}`;\n        ctx.textBaseline = 'middle';\n        ctx.textAlign = 'center';\n        // Truncate text if it won't fit\n        let label = text;\n        const maxWidth = w - 8; // More padding for better appearance\n        while (ctx.measureText(label).width > maxWidth && label.length > 1) {\n            label = label.slice(0, -1);\n        }\n        if (label !== text && label.length > 0) {\n            label = label.slice(0, -1) + 'â€¦';\n        }\n        ctx.fillText(label, x + w / 2, y + h / 2);\n        ctx.restore();\n    }\n    // Draw a mask that obscures all but the last four characters of the\n    // provided preview text.  The mask uses asterisks for the hidden\n    // portion.  Nonâ€‘digit characters are preserved in their positions.\n    function drawMaskLast4(x, y, w, h, preview) {\n        const text = preview || '';\n        // Keep only last 4 alphanumeric characters; replace preceding\n        // characters (letters or digits) with asterisks but preserve spaces and other symbols.\n        let masked = '';\n        let remaining = 4;\n        for (let i = text.length - 1; i >= 0; i--) {\n            const ch = text[i];\n            if (/\\w/.test(ch) && remaining > 0) {\n                masked = ch + masked;\n                remaining--;\n            }\n            else if (/\\w/.test(ch)) {\n                masked = '*' + masked;\n            }\n            else {\n                masked = ch + masked;\n            }\n        }\n        drawLabel(x, y, w, h, masked);\n    }\n    // Draw redactions using the selected style for each action.  If the\n    // style is not recognised, fallback to a solid box.\n    actions.forEach(action => {\n        const det = map.get(action.detectionId);\n        if (!det)\n            return;\n        const { box } = det;\n        const x = box.x * canvas.width;\n        const y = box.y * canvas.height;\n        const w = box.w * canvas.width;\n        const h = box.h * canvas.height;\n        const config = action.config || {};\n        switch (action.style) {\n            case 'BLUR':\n                drawBlur(x, y, w, h);\n                break;\n            case 'PIXELATE':\n                drawPixelate(x, y, w, h);\n                break;\n            case 'LABEL':\n                const labelText = config.labelText || action.labelText || det.kind;\n                drawLabel(x, y, w, h, labelText, config);\n                break;\n            case 'MASK_LAST4':\n                drawMaskLast4(x, y, w, h, det.preview);\n                break;\n            case 'PATTERN':\n                drawPattern(x, y, w, h, config);\n                break;\n            case 'GRADIENT':\n                drawGradient(x, y, w, h, config);\n                break;\n            case 'SOLID_COLOR':\n                drawSolidColor(x, y, w, h, config);\n                break;\n            case 'VECTOR_OVERLAY':\n                // Vector overlay for images - for now, fall back to enhanced box\n                drawBox(x, y, w, h, config);\n                break;\n            case 'REMOVE_METADATA':\n                // Metadata removal is handled by reâ€‘encoding the image; no\n                // drawing needed for this redaction.\n                break;\n            case 'BOX':\n            default:\n                drawBox(x, y, w, h, config);\n        }\n    });\n    // Apply image sanitization options\n    let outputFormat = 'image/jpeg';\n    let outputQuality = quality;\n    // Always re-encode to strip EXIF/metadata by default\n    // The canvas.toDataURL() method automatically strips metadata\n    return canvas.toDataURL(outputFormat, outputQuality);\n}\n/** Enhanced vector-based PDF redaction with advanced styling support */\nasync function applyRedactionsToPdf(file, actions, detectionResult, options = {}) {\n    var _a, _b;\n    const origBytes = await file.arrayBuffer();\n    const origPdf = await pdf_lib__WEBPACK_IMPORTED_MODULE_0__.PDFDocument.load(origBytes);\n    const newPdf = await pdf_lib__WEBPACK_IMPORTED_MODULE_0__.PDFDocument.create();\n    const detectionMap = new Map();\n    const detectionsToUse = detectionResult || lastResult;\n    if (detectionsToUse) {\n        for (const det of detectionsToUse.detections) {\n            detectionMap.set(det.id, det);\n        }\n    }\n    // Helper function to parse hex color to RGB\n    function parseColor(hexColor) {\n        const hex = hexColor.replace('#', '');\n        const r = parseInt(hex.substr(0, 2), 16) / 255;\n        const g = parseInt(hex.substr(2, 2), 16) / 255;\n        const b = parseInt(hex.substr(4, 2), 16) / 255;\n        return { r, g, b };\n    }\n    // Apply document sanitization if requested\n    if (options.sanitization) {\n        if (options.sanitization.removeMetadata) {\n            // Remove PDF metadata\n            newPdf.setTitle('');\n            newPdf.setAuthor('');\n            newPdf.setSubject('');\n            newPdf.setKeywords('');\n            newPdf.setProducer('');\n            newPdf.setCreator('');\n            newPdf.setCreationDate(new Date(0));\n            newPdf.setModificationDate(new Date(0));\n        }\n    }\n    const total = origPdf.getPageCount();\n    for (let i = 0; i < total; i++) {\n        const [copiedPage] = await newPdf.copyPages(origPdf, [i]);\n        const page = newPdf.addPage(copiedPage);\n        const { width, height } = page.getSize();\n        // Remove annotations if requested\n        if ((_a = options.sanitization) === null || _a === void 0 ? void 0 : _a.removeAnnotations) {\n            // Note: pdf-lib doesn't have direct annotation removal API\n            // This would need custom implementation or different library\n        }\n        // Filter actions for this page\n        const pageActions = actions.filter(act => {\n            var _a;\n            const det = detectionMap.get(act.detectionId);\n            return det && ((_a = det.box.page) !== null && _a !== void 0 ? _a : 0) === i;\n        });\n        // Apply vector-based redactions\n        for (const action of pageActions) {\n            const det = detectionMap.get(action.detectionId);\n            if (!det)\n                continue;\n            const { box } = det;\n            const config = action.config || {};\n            const x = box.x * width;\n            // Convert from top-left origin to PDF bottom-left origin\n            const y = (1 - box.y - box.h) * height;\n            const w = box.w * width;\n            const h = box.h * height;\n            // Parse colors\n            const primaryColor = config.color ? parseColor(config.color) : { r: 0, g: 0, b: 0 };\n            const secondaryColor = config.secondaryColor ? parseColor(config.secondaryColor) : { r: 1, g: 1, b: 1 };\n            const opacity = (_b = config.opacity) !== null && _b !== void 0 ? _b : 1.0;\n            switch (action.style) {\n                case 'BOX':\n                case 'SOLID_COLOR':\n                    page.drawRectangle({\n                        x, y, width: w, height: h,\n                        color: (0,pdf_lib__WEBPACK_IMPORTED_MODULE_0__.rgb)(primaryColor.r, primaryColor.g, primaryColor.b),\n                        opacity,\n                        borderColor: config.borderColor ? parseColor(config.borderColor) : undefined,\n                        borderWidth: config.borderWidth || 0\n                    });\n                    break;\n                case 'GRADIENT':\n                    // PDF gradients are complex - use solid color for now\n                    page.drawRectangle({\n                        x, y, width: w, height: h,\n                        color: (0,pdf_lib__WEBPACK_IMPORTED_MODULE_0__.rgb)(primaryColor.r, primaryColor.g, primaryColor.b),\n                        opacity\n                    });\n                    break;\n                case 'PATTERN':\n                    // Draw background\n                    page.drawRectangle({\n                        x, y, width: w, height: h,\n                        color: (0,pdf_lib__WEBPACK_IMPORTED_MODULE_0__.rgb)(secondaryColor.r, secondaryColor.g, secondaryColor.b),\n                        opacity\n                    });\n                    // Add pattern overlay\n                    const patternType = config.patternType || 'diagonal';\n                    const lineColor = (0,pdf_lib__WEBPACK_IMPORTED_MODULE_0__.rgb)(primaryColor.r, primaryColor.g, primaryColor.b);\n                    if (patternType === 'diagonal') {\n                        for (let offset = -h; offset < w + h; offset += 8) {\n                            page.drawLine({\n                                start: { x: x + offset, y: y },\n                                end: { x: x + offset + h, y: y + h },\n                                color: lineColor,\n                                thickness: 2,\n                                opacity\n                            });\n                        }\n                    }\n                    break;\n                case 'VECTOR_OVERLAY':\n                    // Enhanced vector redaction with proper PDF vector operations\n                    page.drawRectangle({\n                        x, y, width: w, height: h,\n                        color: (0,pdf_lib__WEBPACK_IMPORTED_MODULE_0__.rgb)(primaryColor.r, primaryColor.g, primaryColor.b),\n                        opacity,\n                        borderColor: config.borderColor ? parseColor(config.borderColor) : undefined,\n                        borderWidth: config.borderWidth || 0\n                    });\n                    break;\n                case 'LABEL':\n                    // Draw background\n                    page.drawRectangle({\n                        x, y, width: w, height: h,\n                        color: (0,pdf_lib__WEBPACK_IMPORTED_MODULE_0__.rgb)(primaryColor.r, primaryColor.g, primaryColor.b),\n                        opacity\n                    });\n                    // Draw text\n                    const labelText = config.labelText || action.labelText || det.kind;\n                    const fontSize = config.fontSize || Math.max(8, h * 0.6);\n                    const maxChars = Math.floor((w - 8) / (fontSize * 0.6));\n                    let label = labelText;\n                    if (label.length > maxChars) {\n                        label = label.slice(0, maxChars > 3 ? maxChars - 1 : 0) + 'â€¦';\n                    }\n                    const estTextWidth = label.length * fontSize * 0.6;\n                    const xOffset = (w - estTextWidth) / 2;\n                    page.drawText(label, {\n                        x: x + Math.max(0, xOffset),\n                        y: y + h / 2 - fontSize / 2,\n                        size: fontSize,\n                        color: (0,pdf_lib__WEBPACK_IMPORTED_MODULE_0__.rgb)(secondaryColor.r, secondaryColor.g, secondaryColor.b),\n                        opacity\n                    });\n                    break;\n                case 'MASK_LAST4':\n                    // Draw background\n                    page.drawRectangle({\n                        x, y, width: w, height: h,\n                        color: (0,pdf_lib__WEBPACK_IMPORTED_MODULE_0__.rgb)(primaryColor.r, primaryColor.g, primaryColor.b),\n                        opacity\n                    });\n                    // Create masked text\n                    const preview = det.preview || '';\n                    let masked = '';\n                    let remaining = 4;\n                    for (let i = preview.length - 1; i >= 0; i--) {\n                        const ch = preview[i];\n                        if (/\\w/.test(ch) && remaining > 0) {\n                            masked = ch + masked;\n                            remaining--;\n                        }\n                        else if (/\\w/.test(ch)) {\n                            masked = '*' + masked;\n                        }\n                        else {\n                            masked = ch + masked;\n                        }\n                    }\n                    const maskFontSize = Math.max(8, h * 0.6);\n                    const maskTextWidth = masked.length * maskFontSize * 0.6;\n                    const maskXOffset = (w - maskTextWidth) / 2;\n                    page.drawText(masked, {\n                        x: x + Math.max(0, maskXOffset),\n                        y: y + h / 2 - maskFontSize / 2,\n                        size: maskFontSize,\n                        color: (0,pdf_lib__WEBPACK_IMPORTED_MODULE_0__.rgb)(secondaryColor.r, secondaryColor.g, secondaryColor.b),\n                        opacity\n                    });\n                    break;\n                default:\n                    // Default to solid rectangle\n                    page.drawRectangle({\n                        x, y, width: w, height: h,\n                        color: (0,pdf_lib__WEBPACK_IMPORTED_MODULE_0__.rgb)(primaryColor.r, primaryColor.g, primaryColor.b),\n                        opacity: opacity\n                    });\n            }\n        }\n    }\n    const pdfBytes = await newPdf.save();\n    const base64 = typeof Buffer !== 'undefined' ? Buffer.from(pdfBytes).toString('base64') : btoa(String.fromCharCode(...new Uint8Array(pdfBytes)));\n    return `data:application/pdf;base64,${base64}`;\n}\n/**\n * Apply redactions to a file using the previously analysed detections.\n *\n * Note: This implementation relies on `lastResult` set by analyzeDocument().\n * In a real application you should pass the detections explicitly to avoid\n * hidden state.\n */\nasync function applyRedactions(file, actions, opts, detections) {\n    var _a;\n    // If detections are provided directly, create a temporary result object\n    let result = lastResult;\n    if (detections && detections.length > 0) {\n        result = {\n            detections: detections,\n            pages: Math.max(...detections.map(d => { var _a; return (_a = d.box.page) !== null && _a !== void 0 ? _a : 0; })) + 1 || 1\n        };\n    }\n    if (!result) {\n        throw new Error('No analysis result available.  Call analyzeDocument() first.');\n    }\n    const mime = file.type || '';\n    let fileUri;\n    if (mime === 'application/pdf' || opts.output === 'pdf') {\n        fileUri = await applyRedactionsToPdf(file, actions, result, opts);\n    }\n    else {\n        const quality = (_a = opts.quality) !== null && _a !== void 0 ? _a : 0.92;\n        fileUri = await applyRedactionsToImage(file, actions, quality, result);\n    }\n    // Build a simple report summarising redactions\n    const report = {};\n    if (result) {\n        report.totalDetections = result.detections.length;\n        report.redactedCount = actions.length;\n        const counts = {};\n        for (const action of actions) {\n            const det = result.detections.find(d => d.id === action.detectionId);\n            if (det) {\n                counts[det.kind] = (counts[det.kind] || 0) + 1;\n            }\n        }\n        report.byKind = counts;\n    }\n    return { fileUri, report };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../core-detect/dist/pipeline/apply.js\n"));

/***/ })

});