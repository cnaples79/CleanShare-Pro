"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "../core-detect/dist/history.js":
/*!**************************************!*\
  !*** ../core-detect/dist/history.js ***!
  \**************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   clearHistory: function() { return /* binding */ clearHistory; },\n/* harmony export */   endSession: function() { return /* binding */ endSession; },\n/* harmony export */   exportHistory: function() { return /* binding */ exportHistory; },\n/* harmony export */   getAllRecords: function() { return /* binding */ getAllRecords; },\n/* harmony export */   getCurrentSession: function() { return /* binding */ getCurrentSession; },\n/* harmony export */   getProcessingStats: function() { return /* binding */ getProcessingStats; },\n/* harmony export */   getSession: function() { return /* binding */ getSession; },\n/* harmony export */   getSessionRecords: function() { return /* binding */ getSessionRecords; },\n/* harmony export */   getSessions: function() { return /* binding */ getSessions; },\n/* harmony export */   recordAnalysisResults: function() { return /* binding */ recordAnalysisResults; },\n/* harmony export */   recordRedactionResults: function() { return /* binding */ recordRedactionResults; },\n/* harmony export */   startFileProcessing: function() { return /* binding */ startFileProcessing; },\n/* harmony export */   startSession: function() { return /* binding */ startSession; }\n/* harmony export */ });\n// Local storage keys\nconst SESSIONS_KEY = 'cleanshare_processing_sessions';\nconst RECORDS_KEY = 'cleanshare_file_records';\n// In-memory storage for current session\nlet sessions = [];\nlet records = [];\nlet currentSession = null;\n// Load data from localStorage on startup\ntry {\n    if (typeof localStorage !== 'undefined') {\n        const storedSessions = localStorage.getItem(SESSIONS_KEY);\n        const storedRecords = localStorage.getItem(RECORDS_KEY);\n        if (storedSessions) {\n            sessions = JSON.parse(storedSessions);\n        }\n        if (storedRecords) {\n            records = JSON.parse(storedRecords);\n        }\n    }\n}\ncatch (error) {\n    console.warn('Failed to load processing history from localStorage:', error);\n}\n// Save to localStorage\nfunction saveToStorage() {\n    try {\n        if (typeof localStorage !== 'undefined') {\n            localStorage.setItem(SESSIONS_KEY, JSON.stringify(sessions));\n            localStorage.setItem(RECORDS_KEY, JSON.stringify(records));\n        }\n    }\n    catch (error) {\n        console.warn('Failed to save processing history to localStorage:', error);\n    }\n}\n// Generate unique ID\nfunction generateId() {\n    return `${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n}\n// Calculate statistics from detections\nfunction calculateDetectionStats(detections) {\n    const counts = {};\n    let totalConfidence = 0;\n    const confidenceDistribution = { low: 0, medium: 0, high: 0 };\n    detections.forEach(detection => {\n        counts[detection.kind] = (counts[detection.kind] || 0) + 1;\n        totalConfidence += detection.confidence;\n        if (detection.confidence < 0.5) {\n            confidenceDistribution.low++;\n        }\n        else if (detection.confidence < 0.8) {\n            confidenceDistribution.medium++;\n        }\n        else {\n            confidenceDistribution.high++;\n        }\n    });\n    return {\n        counts,\n        total: detections.length,\n        averageConfidence: detections.length > 0 ? totalConfidence / detections.length : 0,\n        confidenceDistribution\n    };\n}\n// Calculate redaction statistics\nfunction calculateRedactionStats(actions) {\n    const byType = {};\n    const byStyle = {};\n    actions.forEach(action => {\n        byStyle[action.style] = (byStyle[action.style] || 0) + 1;\n    });\n    return {\n        total: actions.length,\n        byType, // Will be populated when we have detection kind mapping\n        byStyle\n    };\n}\n/** Start a new processing session */\nfunction startSession(options) {\n    const sessionId = generateId();\n    currentSession = {\n        id: sessionId,\n        startTime: new Date().toISOString(),\n        status: 'running',\n        totalFiles: options.totalFiles,\n        processedFiles: 0,\n        failedFiles: 0,\n        presetId: options.presetId,\n        presetName: options.presetName,\n        options: {\n            analyze: options.analyzeOptions,\n            apply: options.applyOptions\n        }\n    };\n    sessions.push(currentSession);\n    saveToStorage();\n    return sessionId;\n}\n/** End the current processing session */\nfunction endSession(sessionId, status = 'completed') {\n    const session = sessions.find(s => s.id === sessionId);\n    if (session) {\n        session.endTime = new Date().toISOString();\n        session.status = status;\n        if ((currentSession === null || currentSession === void 0 ? void 0 : currentSession.id) === sessionId) {\n            currentSession = null;\n        }\n        saveToStorage();\n    }\n}\n/** Record the start of file processing */\nfunction startFileProcessing(options) {\n    const recordId = generateId();\n    const record = {\n        id: recordId,\n        sessionId: options.sessionId,\n        fileName: options.fileName,\n        fileSize: options.fileSize,\n        fileType: options.fileType,\n        timestamp: new Date().toISOString(),\n        processingTime: 0,\n        status: 'analyzing',\n        detectionCounts: {},\n        totalDetections: 0,\n        averageConfidence: 0,\n        redactionStats: {\n            total: 0,\n            byType: {},\n            byStyle: {}\n        },\n        confidenceDistribution: { low: 0, medium: 0, high: 0 }\n    };\n    records.push(record);\n    saveToStorage();\n    return recordId;\n}\n/** Update file processing record with analysis results */\nfunction recordAnalysisResults(recordId, options) {\n    const record = records.find(r => r.id === recordId);\n    if (!record)\n        return;\n    if (options.error) {\n        record.status = 'failed';\n        record.error = options.error;\n        // Update session failed count\n        const session = sessions.find(s => s.id === record.sessionId);\n        if (session) {\n            session.failedFiles++;\n        }\n    }\n    else {\n        record.status = 'applying';\n        record.detections = options.detections;\n        const stats = calculateDetectionStats(options.detections);\n        record.detectionCounts = stats.counts;\n        record.totalDetections = stats.total;\n        record.averageConfidence = stats.averageConfidence;\n        record.confidenceDistribution = stats.confidenceDistribution;\n        record.ocrTime = options.ocrTime;\n        record.detectionTime = options.detectionTime;\n    }\n    saveToStorage();\n}\n/** Update file processing record with redaction results */\nfunction recordRedactionResults(recordId, options) {\n    const record = records.find(r => r.id === recordId);\n    if (!record)\n        return;\n    const startTime = new Date(record.timestamp).getTime();\n    record.processingTime = Date.now() - startTime;\n    if (options.error) {\n        record.status = 'failed';\n        record.error = options.error;\n        // Update session failed count\n        const session = sessions.find(s => s.id === record.sessionId);\n        if (session) {\n            session.failedFiles++;\n        }\n    }\n    else {\n        record.status = 'completed';\n        record.appliedRedactions = options.appliedRedactions;\n        record.redactionStats = calculateRedactionStats(options.appliedRedactions);\n        record.redactionTime = options.redactionTime;\n        record.outputSize = options.outputSize;\n        // Update session processed count\n        const session = sessions.find(s => s.id === record.sessionId);\n        if (session) {\n            session.processedFiles++;\n        }\n    }\n    saveToStorage();\n}\n/** Get all processing sessions */\nfunction getSessions() {\n    return sessions.slice().reverse(); // Most recent first\n}\n/** Get session by ID */\nfunction getSession(sessionId) {\n    return sessions.find(s => s.id === sessionId);\n}\n/** Get file records for a session */\nfunction getSessionRecords(sessionId) {\n    return records.filter(r => r.sessionId === sessionId);\n}\n/** Get all file records */\nfunction getAllRecords() {\n    return records.slice().reverse(); // Most recent first\n}\n/** Get processing statistics */\nfunction getProcessingStats(dateRange) {\n    let filteredRecords = records;\n    if (dateRange) {\n        filteredRecords = records.filter(r => {\n            const timestamp = new Date(r.timestamp);\n            return timestamp >= new Date(dateRange.start) && timestamp <= new Date(dateRange.end);\n        });\n    }\n    const completedRecords = filteredRecords.filter(r => r.status === 'completed');\n    const totalDetections = completedRecords.reduce((sum, r) => sum + r.totalDetections, 0);\n    const totalProcessingTime = completedRecords.reduce((sum, r) => sum + r.processingTime, 0);\n    // Calculate detection statistics\n    const detectionsByType = {};\n    const detectionsByConfidence = { low: 0, medium: 0, high: 0 };\n    const redactionsByStyle = {};\n    const presetUsage = {};\n    completedRecords.forEach(record => {\n        // Detection counts by type\n        Object.entries(record.detectionCounts).forEach(([type, count]) => {\n            detectionsByType[type] = (detectionsByType[type] || 0) + count;\n        });\n        // Confidence distribution\n        detectionsByConfidence.low += record.confidenceDistribution.low;\n        detectionsByConfidence.medium += record.confidenceDistribution.medium;\n        detectionsByConfidence.high += record.confidenceDistribution.high;\n        // Redaction styles\n        Object.entries(record.redactionStats.byStyle).forEach(([style, count]) => {\n            redactionsByStyle[style] = (redactionsByStyle[style] || 0) + count;\n        });\n        // Preset usage\n        const session = sessions.find(s => s.id === record.sessionId);\n        if (session === null || session === void 0 ? void 0 : session.presetName) {\n            presetUsage[session.presetName] = (presetUsage[session.presetName] || 0) + 1;\n        }\n    });\n    // Processing times by date\n    const timesByDate = new Map();\n    completedRecords.forEach(record => {\n        const date = new Date(record.timestamp).toISOString().split('T')[0];\n        const existing = timesByDate.get(date) || { total: 0, count: 0 };\n        timesByDate.set(date, {\n            total: existing.total + record.processingTime,\n            count: existing.count + 1\n        });\n    });\n    const processingTimesByDate = Array.from(timesByDate.entries()).map(([date, { total, count }]) => ({\n        date,\n        averageTime: total / count,\n        fileCount: count\n    })).sort((a, b) => a.date.localeCompare(b.date));\n    return {\n        totalSessions: sessions.length,\n        totalFiles: filteredRecords.length,\n        totalDetections,\n        averageProcessingTime: completedRecords.length > 0 ? totalProcessingTime / completedRecords.length : 0,\n        successRate: filteredRecords.length > 0 ? completedRecords.length / filteredRecords.length : 0,\n        detectionsByType,\n        detectionsByConfidence,\n        redactionsByStyle,\n        processingTimesByDate,\n        presetUsage\n    };\n}\n/** Clear processing history */\nfunction clearHistory() {\n    sessions = [];\n    records = [];\n    currentSession = null;\n    saveToStorage();\n}\n/** Export processing history */\nfunction exportHistory(options = { format: 'json' }) {\n    var _a;\n    let data;\n    if (options.format === 'json') {\n        data = {\n            sessions: getSessions(),\n            records: getAllRecords(),\n            stats: getProcessingStats(options.dateRange),\n            exportedAt: new Date().toISOString()\n        };\n        if (!options.includeFileDetails) {\n            delete data.records;\n        }\n        if (!options.includeDetectionDetails) {\n            (_a = data.records) === null || _a === void 0 ? void 0 : _a.forEach((record) => {\n                delete record.detections;\n                delete record.appliedRedactions;\n            });\n        }\n        return JSON.stringify(data, null, 2);\n    }\n    else {\n        // CSV format - flatten records for easy analysis\n        const headers = [\n            'Session ID',\n            'File Name',\n            'File Size',\n            'File Type',\n            'Timestamp',\n            'Processing Time (ms)',\n            'Status',\n            'Total Detections',\n            'Average Confidence',\n            'High Confidence Count',\n            'Medium Confidence Count',\n            'Low Confidence Count',\n            'Total Redactions',\n            'Preset Name',\n            'Error'\n        ];\n        const rows = getAllRecords().map(record => {\n            const session = sessions.find(s => s.id === record.sessionId);\n            return [\n                record.sessionId,\n                record.fileName,\n                record.fileSize,\n                record.fileType,\n                record.timestamp,\n                record.processingTime,\n                record.status,\n                record.totalDetections,\n                record.averageConfidence.toFixed(3),\n                record.confidenceDistribution.high,\n                record.confidenceDistribution.medium,\n                record.confidenceDistribution.low,\n                record.redactionStats.total,\n                (session === null || session === void 0 ? void 0 : session.presetName) || '',\n                record.error || ''\n            ];\n        });\n        return [headers, ...rows].map(row => row.map(cell => `\"${String(cell).replace(/\"/g, '\"\"')}\"`).join(',')).join('\\n');\n    }\n}\n/** Get current active session */\nfunction getCurrentSession() {\n    return currentSession;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULGlFQUFpRSxpQ0FBaUM7QUFDbEc7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uLi9jb3JlLWRldGVjdC9kaXN0L2hpc3RvcnkuanM/MDU2NSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBMb2NhbCBzdG9yYWdlIGtleXNcbmNvbnN0IFNFU1NJT05TX0tFWSA9ICdjbGVhbnNoYXJlX3Byb2Nlc3Npbmdfc2Vzc2lvbnMnO1xuY29uc3QgUkVDT1JEU19LRVkgPSAnY2xlYW5zaGFyZV9maWxlX3JlY29yZHMnO1xuLy8gSW4tbWVtb3J5IHN0b3JhZ2UgZm9yIGN1cnJlbnQgc2Vzc2lvblxubGV0IHNlc3Npb25zID0gW107XG5sZXQgcmVjb3JkcyA9IFtdO1xubGV0IGN1cnJlbnRTZXNzaW9uID0gbnVsbDtcbi8vIExvYWQgZGF0YSBmcm9tIGxvY2FsU3RvcmFnZSBvbiBzdGFydHVwXG50cnkge1xuICAgIGlmICh0eXBlb2YgbG9jYWxTdG9yYWdlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjb25zdCBzdG9yZWRTZXNzaW9ucyA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKFNFU1NJT05TX0tFWSk7XG4gICAgICAgIGNvbnN0IHN0b3JlZFJlY29yZHMgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShSRUNPUkRTX0tFWSk7XG4gICAgICAgIGlmIChzdG9yZWRTZXNzaW9ucykge1xuICAgICAgICAgICAgc2Vzc2lvbnMgPSBKU09OLnBhcnNlKHN0b3JlZFNlc3Npb25zKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3RvcmVkUmVjb3Jkcykge1xuICAgICAgICAgICAgcmVjb3JkcyA9IEpTT04ucGFyc2Uoc3RvcmVkUmVjb3Jkcyk7XG4gICAgICAgIH1cbiAgICB9XG59XG5jYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLndhcm4oJ0ZhaWxlZCB0byBsb2FkIHByb2Nlc3NpbmcgaGlzdG9yeSBmcm9tIGxvY2FsU3RvcmFnZTonLCBlcnJvcik7XG59XG4vLyBTYXZlIHRvIGxvY2FsU3RvcmFnZVxuZnVuY3Rpb24gc2F2ZVRvU3RvcmFnZSgpIHtcbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIGxvY2FsU3RvcmFnZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKFNFU1NJT05TX0tFWSwgSlNPTi5zdHJpbmdpZnkoc2Vzc2lvbnMpKTtcbiAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKFJFQ09SRFNfS0VZLCBKU09OLnN0cmluZ2lmeShyZWNvcmRzKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUud2FybignRmFpbGVkIHRvIHNhdmUgcHJvY2Vzc2luZyBoaXN0b3J5IHRvIGxvY2FsU3RvcmFnZTonLCBlcnJvcik7XG4gICAgfVxufVxuLy8gR2VuZXJhdGUgdW5pcXVlIElEXG5mdW5jdGlvbiBnZW5lcmF0ZUlkKCkge1xuICAgIHJldHVybiBgJHtEYXRlLm5vdygpfV8ke01hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCA5KX1gO1xufVxuLy8gQ2FsY3VsYXRlIHN0YXRpc3RpY3MgZnJvbSBkZXRlY3Rpb25zXG5mdW5jdGlvbiBjYWxjdWxhdGVEZXRlY3Rpb25TdGF0cyhkZXRlY3Rpb25zKSB7XG4gICAgY29uc3QgY291bnRzID0ge307XG4gICAgbGV0IHRvdGFsQ29uZmlkZW5jZSA9IDA7XG4gICAgY29uc3QgY29uZmlkZW5jZURpc3RyaWJ1dGlvbiA9IHsgbG93OiAwLCBtZWRpdW06IDAsIGhpZ2g6IDAgfTtcbiAgICBkZXRlY3Rpb25zLmZvckVhY2goZGV0ZWN0aW9uID0+IHtcbiAgICAgICAgY291bnRzW2RldGVjdGlvbi5raW5kXSA9IChjb3VudHNbZGV0ZWN0aW9uLmtpbmRdIHx8IDApICsgMTtcbiAgICAgICAgdG90YWxDb25maWRlbmNlICs9IGRldGVjdGlvbi5jb25maWRlbmNlO1xuICAgICAgICBpZiAoZGV0ZWN0aW9uLmNvbmZpZGVuY2UgPCAwLjUpIHtcbiAgICAgICAgICAgIGNvbmZpZGVuY2VEaXN0cmlidXRpb24ubG93Kys7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZGV0ZWN0aW9uLmNvbmZpZGVuY2UgPCAwLjgpIHtcbiAgICAgICAgICAgIGNvbmZpZGVuY2VEaXN0cmlidXRpb24ubWVkaXVtKys7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25maWRlbmNlRGlzdHJpYnV0aW9uLmhpZ2grKztcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiB7XG4gICAgICAgIGNvdW50cyxcbiAgICAgICAgdG90YWw6IGRldGVjdGlvbnMubGVuZ3RoLFxuICAgICAgICBhdmVyYWdlQ29uZmlkZW5jZTogZGV0ZWN0aW9ucy5sZW5ndGggPiAwID8gdG90YWxDb25maWRlbmNlIC8gZGV0ZWN0aW9ucy5sZW5ndGggOiAwLFxuICAgICAgICBjb25maWRlbmNlRGlzdHJpYnV0aW9uXG4gICAgfTtcbn1cbi8vIENhbGN1bGF0ZSByZWRhY3Rpb24gc3RhdGlzdGljc1xuZnVuY3Rpb24gY2FsY3VsYXRlUmVkYWN0aW9uU3RhdHMoYWN0aW9ucykge1xuICAgIGNvbnN0IGJ5VHlwZSA9IHt9O1xuICAgIGNvbnN0IGJ5U3R5bGUgPSB7fTtcbiAgICBhY3Rpb25zLmZvckVhY2goYWN0aW9uID0+IHtcbiAgICAgICAgYnlTdHlsZVthY3Rpb24uc3R5bGVdID0gKGJ5U3R5bGVbYWN0aW9uLnN0eWxlXSB8fCAwKSArIDE7XG4gICAgfSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdG90YWw6IGFjdGlvbnMubGVuZ3RoLFxuICAgICAgICBieVR5cGUsIC8vIFdpbGwgYmUgcG9wdWxhdGVkIHdoZW4gd2UgaGF2ZSBkZXRlY3Rpb24ga2luZCBtYXBwaW5nXG4gICAgICAgIGJ5U3R5bGVcbiAgICB9O1xufVxuLyoqIFN0YXJ0IGEgbmV3IHByb2Nlc3Npbmcgc2Vzc2lvbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0YXJ0U2Vzc2lvbihvcHRpb25zKSB7XG4gICAgY29uc3Qgc2Vzc2lvbklkID0gZ2VuZXJhdGVJZCgpO1xuICAgIGN1cnJlbnRTZXNzaW9uID0ge1xuICAgICAgICBpZDogc2Vzc2lvbklkLFxuICAgICAgICBzdGFydFRpbWU6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICAgICAgc3RhdHVzOiAncnVubmluZycsXG4gICAgICAgIHRvdGFsRmlsZXM6IG9wdGlvbnMudG90YWxGaWxlcyxcbiAgICAgICAgcHJvY2Vzc2VkRmlsZXM6IDAsXG4gICAgICAgIGZhaWxlZEZpbGVzOiAwLFxuICAgICAgICBwcmVzZXRJZDogb3B0aW9ucy5wcmVzZXRJZCxcbiAgICAgICAgcHJlc2V0TmFtZTogb3B0aW9ucy5wcmVzZXROYW1lLFxuICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgICBhbmFseXplOiBvcHRpb25zLmFuYWx5emVPcHRpb25zLFxuICAgICAgICAgICAgYXBwbHk6IG9wdGlvbnMuYXBwbHlPcHRpb25zXG4gICAgICAgIH1cbiAgICB9O1xuICAgIHNlc3Npb25zLnB1c2goY3VycmVudFNlc3Npb24pO1xuICAgIHNhdmVUb1N0b3JhZ2UoKTtcbiAgICByZXR1cm4gc2Vzc2lvbklkO1xufVxuLyoqIEVuZCB0aGUgY3VycmVudCBwcm9jZXNzaW5nIHNlc3Npb24gKi9cbmV4cG9ydCBmdW5jdGlvbiBlbmRTZXNzaW9uKHNlc3Npb25JZCwgc3RhdHVzID0gJ2NvbXBsZXRlZCcpIHtcbiAgICBjb25zdCBzZXNzaW9uID0gc2Vzc2lvbnMuZmluZChzID0+IHMuaWQgPT09IHNlc3Npb25JZCk7XG4gICAgaWYgKHNlc3Npb24pIHtcbiAgICAgICAgc2Vzc2lvbi5lbmRUaW1lID0gbmV3IERhdGUoKS50b0lTT1N0cmluZygpO1xuICAgICAgICBzZXNzaW9uLnN0YXR1cyA9IHN0YXR1cztcbiAgICAgICAgaWYgKChjdXJyZW50U2Vzc2lvbiA9PT0gbnVsbCB8fCBjdXJyZW50U2Vzc2lvbiA9PT0gdm9pZCAwID8gdm9pZCAwIDogY3VycmVudFNlc3Npb24uaWQpID09PSBzZXNzaW9uSWQpIHtcbiAgICAgICAgICAgIGN1cnJlbnRTZXNzaW9uID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBzYXZlVG9TdG9yYWdlKCk7XG4gICAgfVxufVxuLyoqIFJlY29yZCB0aGUgc3RhcnQgb2YgZmlsZSBwcm9jZXNzaW5nICovXG5leHBvcnQgZnVuY3Rpb24gc3RhcnRGaWxlUHJvY2Vzc2luZyhvcHRpb25zKSB7XG4gICAgY29uc3QgcmVjb3JkSWQgPSBnZW5lcmF0ZUlkKCk7XG4gICAgY29uc3QgcmVjb3JkID0ge1xuICAgICAgICBpZDogcmVjb3JkSWQsXG4gICAgICAgIHNlc3Npb25JZDogb3B0aW9ucy5zZXNzaW9uSWQsXG4gICAgICAgIGZpbGVOYW1lOiBvcHRpb25zLmZpbGVOYW1lLFxuICAgICAgICBmaWxlU2l6ZTogb3B0aW9ucy5maWxlU2l6ZSxcbiAgICAgICAgZmlsZVR5cGU6IG9wdGlvbnMuZmlsZVR5cGUsXG4gICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgICAgICBwcm9jZXNzaW5nVGltZTogMCxcbiAgICAgICAgc3RhdHVzOiAnYW5hbHl6aW5nJyxcbiAgICAgICAgZGV0ZWN0aW9uQ291bnRzOiB7fSxcbiAgICAgICAgdG90YWxEZXRlY3Rpb25zOiAwLFxuICAgICAgICBhdmVyYWdlQ29uZmlkZW5jZTogMCxcbiAgICAgICAgcmVkYWN0aW9uU3RhdHM6IHtcbiAgICAgICAgICAgIHRvdGFsOiAwLFxuICAgICAgICAgICAgYnlUeXBlOiB7fSxcbiAgICAgICAgICAgIGJ5U3R5bGU6IHt9XG4gICAgICAgIH0sXG4gICAgICAgIGNvbmZpZGVuY2VEaXN0cmlidXRpb246IHsgbG93OiAwLCBtZWRpdW06IDAsIGhpZ2g6IDAgfVxuICAgIH07XG4gICAgcmVjb3Jkcy5wdXNoKHJlY29yZCk7XG4gICAgc2F2ZVRvU3RvcmFnZSgpO1xuICAgIHJldHVybiByZWNvcmRJZDtcbn1cbi8qKiBVcGRhdGUgZmlsZSBwcm9jZXNzaW5nIHJlY29yZCB3aXRoIGFuYWx5c2lzIHJlc3VsdHMgKi9cbmV4cG9ydCBmdW5jdGlvbiByZWNvcmRBbmFseXNpc1Jlc3VsdHMocmVjb3JkSWQsIG9wdGlvbnMpIHtcbiAgICBjb25zdCByZWNvcmQgPSByZWNvcmRzLmZpbmQociA9PiByLmlkID09PSByZWNvcmRJZCk7XG4gICAgaWYgKCFyZWNvcmQpXG4gICAgICAgIHJldHVybjtcbiAgICBpZiAob3B0aW9ucy5lcnJvcikge1xuICAgICAgICByZWNvcmQuc3RhdHVzID0gJ2ZhaWxlZCc7XG4gICAgICAgIHJlY29yZC5lcnJvciA9IG9wdGlvbnMuZXJyb3I7XG4gICAgICAgIC8vIFVwZGF0ZSBzZXNzaW9uIGZhaWxlZCBjb3VudFxuICAgICAgICBjb25zdCBzZXNzaW9uID0gc2Vzc2lvbnMuZmluZChzID0+IHMuaWQgPT09IHJlY29yZC5zZXNzaW9uSWQpO1xuICAgICAgICBpZiAoc2Vzc2lvbikge1xuICAgICAgICAgICAgc2Vzc2lvbi5mYWlsZWRGaWxlcysrO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZWNvcmQuc3RhdHVzID0gJ2FwcGx5aW5nJztcbiAgICAgICAgcmVjb3JkLmRldGVjdGlvbnMgPSBvcHRpb25zLmRldGVjdGlvbnM7XG4gICAgICAgIGNvbnN0IHN0YXRzID0gY2FsY3VsYXRlRGV0ZWN0aW9uU3RhdHMob3B0aW9ucy5kZXRlY3Rpb25zKTtcbiAgICAgICAgcmVjb3JkLmRldGVjdGlvbkNvdW50cyA9IHN0YXRzLmNvdW50cztcbiAgICAgICAgcmVjb3JkLnRvdGFsRGV0ZWN0aW9ucyA9IHN0YXRzLnRvdGFsO1xuICAgICAgICByZWNvcmQuYXZlcmFnZUNvbmZpZGVuY2UgPSBzdGF0cy5hdmVyYWdlQ29uZmlkZW5jZTtcbiAgICAgICAgcmVjb3JkLmNvbmZpZGVuY2VEaXN0cmlidXRpb24gPSBzdGF0cy5jb25maWRlbmNlRGlzdHJpYnV0aW9uO1xuICAgICAgICByZWNvcmQub2NyVGltZSA9IG9wdGlvbnMub2NyVGltZTtcbiAgICAgICAgcmVjb3JkLmRldGVjdGlvblRpbWUgPSBvcHRpb25zLmRldGVjdGlvblRpbWU7XG4gICAgfVxuICAgIHNhdmVUb1N0b3JhZ2UoKTtcbn1cbi8qKiBVcGRhdGUgZmlsZSBwcm9jZXNzaW5nIHJlY29yZCB3aXRoIHJlZGFjdGlvbiByZXN1bHRzICovXG5leHBvcnQgZnVuY3Rpb24gcmVjb3JkUmVkYWN0aW9uUmVzdWx0cyhyZWNvcmRJZCwgb3B0aW9ucykge1xuICAgIGNvbnN0IHJlY29yZCA9IHJlY29yZHMuZmluZChyID0+IHIuaWQgPT09IHJlY29yZElkKTtcbiAgICBpZiAoIXJlY29yZClcbiAgICAgICAgcmV0dXJuO1xuICAgIGNvbnN0IHN0YXJ0VGltZSA9IG5ldyBEYXRlKHJlY29yZC50aW1lc3RhbXApLmdldFRpbWUoKTtcbiAgICByZWNvcmQucHJvY2Vzc2luZ1RpbWUgPSBEYXRlLm5vdygpIC0gc3RhcnRUaW1lO1xuICAgIGlmIChvcHRpb25zLmVycm9yKSB7XG4gICAgICAgIHJlY29yZC5zdGF0dXMgPSAnZmFpbGVkJztcbiAgICAgICAgcmVjb3JkLmVycm9yID0gb3B0aW9ucy5lcnJvcjtcbiAgICAgICAgLy8gVXBkYXRlIHNlc3Npb24gZmFpbGVkIGNvdW50XG4gICAgICAgIGNvbnN0IHNlc3Npb24gPSBzZXNzaW9ucy5maW5kKHMgPT4gcy5pZCA9PT0gcmVjb3JkLnNlc3Npb25JZCk7XG4gICAgICAgIGlmIChzZXNzaW9uKSB7XG4gICAgICAgICAgICBzZXNzaW9uLmZhaWxlZEZpbGVzKys7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJlY29yZC5zdGF0dXMgPSAnY29tcGxldGVkJztcbiAgICAgICAgcmVjb3JkLmFwcGxpZWRSZWRhY3Rpb25zID0gb3B0aW9ucy5hcHBsaWVkUmVkYWN0aW9ucztcbiAgICAgICAgcmVjb3JkLnJlZGFjdGlvblN0YXRzID0gY2FsY3VsYXRlUmVkYWN0aW9uU3RhdHMob3B0aW9ucy5hcHBsaWVkUmVkYWN0aW9ucyk7XG4gICAgICAgIHJlY29yZC5yZWRhY3Rpb25UaW1lID0gb3B0aW9ucy5yZWRhY3Rpb25UaW1lO1xuICAgICAgICByZWNvcmQub3V0cHV0U2l6ZSA9IG9wdGlvbnMub3V0cHV0U2l6ZTtcbiAgICAgICAgLy8gVXBkYXRlIHNlc3Npb24gcHJvY2Vzc2VkIGNvdW50XG4gICAgICAgIGNvbnN0IHNlc3Npb24gPSBzZXNzaW9ucy5maW5kKHMgPT4gcy5pZCA9PT0gcmVjb3JkLnNlc3Npb25JZCk7XG4gICAgICAgIGlmIChzZXNzaW9uKSB7XG4gICAgICAgICAgICBzZXNzaW9uLnByb2Nlc3NlZEZpbGVzKys7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc2F2ZVRvU3RvcmFnZSgpO1xufVxuLyoqIEdldCBhbGwgcHJvY2Vzc2luZyBzZXNzaW9ucyAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFNlc3Npb25zKCkge1xuICAgIHJldHVybiBzZXNzaW9ucy5zbGljZSgpLnJldmVyc2UoKTsgLy8gTW9zdCByZWNlbnQgZmlyc3Rcbn1cbi8qKiBHZXQgc2Vzc2lvbiBieSBJRCAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFNlc3Npb24oc2Vzc2lvbklkKSB7XG4gICAgcmV0dXJuIHNlc3Npb25zLmZpbmQocyA9PiBzLmlkID09PSBzZXNzaW9uSWQpO1xufVxuLyoqIEdldCBmaWxlIHJlY29yZHMgZm9yIGEgc2Vzc2lvbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFNlc3Npb25SZWNvcmRzKHNlc3Npb25JZCkge1xuICAgIHJldHVybiByZWNvcmRzLmZpbHRlcihyID0+IHIuc2Vzc2lvbklkID09PSBzZXNzaW9uSWQpO1xufVxuLyoqIEdldCBhbGwgZmlsZSByZWNvcmRzICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0QWxsUmVjb3JkcygpIHtcbiAgICByZXR1cm4gcmVjb3Jkcy5zbGljZSgpLnJldmVyc2UoKTsgLy8gTW9zdCByZWNlbnQgZmlyc3Rcbn1cbi8qKiBHZXQgcHJvY2Vzc2luZyBzdGF0aXN0aWNzICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0UHJvY2Vzc2luZ1N0YXRzKGRhdGVSYW5nZSkge1xuICAgIGxldCBmaWx0ZXJlZFJlY29yZHMgPSByZWNvcmRzO1xuICAgIGlmIChkYXRlUmFuZ2UpIHtcbiAgICAgICAgZmlsdGVyZWRSZWNvcmRzID0gcmVjb3Jkcy5maWx0ZXIociA9PiB7XG4gICAgICAgICAgICBjb25zdCB0aW1lc3RhbXAgPSBuZXcgRGF0ZShyLnRpbWVzdGFtcCk7XG4gICAgICAgICAgICByZXR1cm4gdGltZXN0YW1wID49IG5ldyBEYXRlKGRhdGVSYW5nZS5zdGFydCkgJiYgdGltZXN0YW1wIDw9IG5ldyBEYXRlKGRhdGVSYW5nZS5lbmQpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgY29uc3QgY29tcGxldGVkUmVjb3JkcyA9IGZpbHRlcmVkUmVjb3Jkcy5maWx0ZXIociA9PiByLnN0YXR1cyA9PT0gJ2NvbXBsZXRlZCcpO1xuICAgIGNvbnN0IHRvdGFsRGV0ZWN0aW9ucyA9IGNvbXBsZXRlZFJlY29yZHMucmVkdWNlKChzdW0sIHIpID0+IHN1bSArIHIudG90YWxEZXRlY3Rpb25zLCAwKTtcbiAgICBjb25zdCB0b3RhbFByb2Nlc3NpbmdUaW1lID0gY29tcGxldGVkUmVjb3Jkcy5yZWR1Y2UoKHN1bSwgcikgPT4gc3VtICsgci5wcm9jZXNzaW5nVGltZSwgMCk7XG4gICAgLy8gQ2FsY3VsYXRlIGRldGVjdGlvbiBzdGF0aXN0aWNzXG4gICAgY29uc3QgZGV0ZWN0aW9uc0J5VHlwZSA9IHt9O1xuICAgIGNvbnN0IGRldGVjdGlvbnNCeUNvbmZpZGVuY2UgPSB7IGxvdzogMCwgbWVkaXVtOiAwLCBoaWdoOiAwIH07XG4gICAgY29uc3QgcmVkYWN0aW9uc0J5U3R5bGUgPSB7fTtcbiAgICBjb25zdCBwcmVzZXRVc2FnZSA9IHt9O1xuICAgIGNvbXBsZXRlZFJlY29yZHMuZm9yRWFjaChyZWNvcmQgPT4ge1xuICAgICAgICAvLyBEZXRlY3Rpb24gY291bnRzIGJ5IHR5cGVcbiAgICAgICAgT2JqZWN0LmVudHJpZXMocmVjb3JkLmRldGVjdGlvbkNvdW50cykuZm9yRWFjaCgoW3R5cGUsIGNvdW50XSkgPT4ge1xuICAgICAgICAgICAgZGV0ZWN0aW9uc0J5VHlwZVt0eXBlXSA9IChkZXRlY3Rpb25zQnlUeXBlW3R5cGVdIHx8IDApICsgY291bnQ7XG4gICAgICAgIH0pO1xuICAgICAgICAvLyBDb25maWRlbmNlIGRpc3RyaWJ1dGlvblxuICAgICAgICBkZXRlY3Rpb25zQnlDb25maWRlbmNlLmxvdyArPSByZWNvcmQuY29uZmlkZW5jZURpc3RyaWJ1dGlvbi5sb3c7XG4gICAgICAgIGRldGVjdGlvbnNCeUNvbmZpZGVuY2UubWVkaXVtICs9IHJlY29yZC5jb25maWRlbmNlRGlzdHJpYnV0aW9uLm1lZGl1bTtcbiAgICAgICAgZGV0ZWN0aW9uc0J5Q29uZmlkZW5jZS5oaWdoICs9IHJlY29yZC5jb25maWRlbmNlRGlzdHJpYnV0aW9uLmhpZ2g7XG4gICAgICAgIC8vIFJlZGFjdGlvbiBzdHlsZXNcbiAgICAgICAgT2JqZWN0LmVudHJpZXMocmVjb3JkLnJlZGFjdGlvblN0YXRzLmJ5U3R5bGUpLmZvckVhY2goKFtzdHlsZSwgY291bnRdKSA9PiB7XG4gICAgICAgICAgICByZWRhY3Rpb25zQnlTdHlsZVtzdHlsZV0gPSAocmVkYWN0aW9uc0J5U3R5bGVbc3R5bGVdIHx8IDApICsgY291bnQ7XG4gICAgICAgIH0pO1xuICAgICAgICAvLyBQcmVzZXQgdXNhZ2VcbiAgICAgICAgY29uc3Qgc2Vzc2lvbiA9IHNlc3Npb25zLmZpbmQocyA9PiBzLmlkID09PSByZWNvcmQuc2Vzc2lvbklkKTtcbiAgICAgICAgaWYgKHNlc3Npb24gPT09IG51bGwgfHwgc2Vzc2lvbiA9PT0gdm9pZCAwID8gdm9pZCAwIDogc2Vzc2lvbi5wcmVzZXROYW1lKSB7XG4gICAgICAgICAgICBwcmVzZXRVc2FnZVtzZXNzaW9uLnByZXNldE5hbWVdID0gKHByZXNldFVzYWdlW3Nlc3Npb24ucHJlc2V0TmFtZV0gfHwgMCkgKyAxO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgLy8gUHJvY2Vzc2luZyB0aW1lcyBieSBkYXRlXG4gICAgY29uc3QgdGltZXNCeURhdGUgPSBuZXcgTWFwKCk7XG4gICAgY29tcGxldGVkUmVjb3Jkcy5mb3JFYWNoKHJlY29yZCA9PiB7XG4gICAgICAgIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZShyZWNvcmQudGltZXN0YW1wKS50b0lTT1N0cmluZygpLnNwbGl0KCdUJylbMF07XG4gICAgICAgIGNvbnN0IGV4aXN0aW5nID0gdGltZXNCeURhdGUuZ2V0KGRhdGUpIHx8IHsgdG90YWw6IDAsIGNvdW50OiAwIH07XG4gICAgICAgIHRpbWVzQnlEYXRlLnNldChkYXRlLCB7XG4gICAgICAgICAgICB0b3RhbDogZXhpc3RpbmcudG90YWwgKyByZWNvcmQucHJvY2Vzc2luZ1RpbWUsXG4gICAgICAgICAgICBjb3VudDogZXhpc3RpbmcuY291bnQgKyAxXG4gICAgICAgIH0pO1xuICAgIH0pO1xuICAgIGNvbnN0IHByb2Nlc3NpbmdUaW1lc0J5RGF0ZSA9IEFycmF5LmZyb20odGltZXNCeURhdGUuZW50cmllcygpKS5tYXAoKFtkYXRlLCB7IHRvdGFsLCBjb3VudCB9XSkgPT4gKHtcbiAgICAgICAgZGF0ZSxcbiAgICAgICAgYXZlcmFnZVRpbWU6IHRvdGFsIC8gY291bnQsXG4gICAgICAgIGZpbGVDb3VudDogY291bnRcbiAgICB9KSkuc29ydCgoYSwgYikgPT4gYS5kYXRlLmxvY2FsZUNvbXBhcmUoYi5kYXRlKSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdG90YWxTZXNzaW9uczogc2Vzc2lvbnMubGVuZ3RoLFxuICAgICAgICB0b3RhbEZpbGVzOiBmaWx0ZXJlZFJlY29yZHMubGVuZ3RoLFxuICAgICAgICB0b3RhbERldGVjdGlvbnMsXG4gICAgICAgIGF2ZXJhZ2VQcm9jZXNzaW5nVGltZTogY29tcGxldGVkUmVjb3Jkcy5sZW5ndGggPiAwID8gdG90YWxQcm9jZXNzaW5nVGltZSAvIGNvbXBsZXRlZFJlY29yZHMubGVuZ3RoIDogMCxcbiAgICAgICAgc3VjY2Vzc1JhdGU6IGZpbHRlcmVkUmVjb3Jkcy5sZW5ndGggPiAwID8gY29tcGxldGVkUmVjb3Jkcy5sZW5ndGggLyBmaWx0ZXJlZFJlY29yZHMubGVuZ3RoIDogMCxcbiAgICAgICAgZGV0ZWN0aW9uc0J5VHlwZSxcbiAgICAgICAgZGV0ZWN0aW9uc0J5Q29uZmlkZW5jZSxcbiAgICAgICAgcmVkYWN0aW9uc0J5U3R5bGUsXG4gICAgICAgIHByb2Nlc3NpbmdUaW1lc0J5RGF0ZSxcbiAgICAgICAgcHJlc2V0VXNhZ2VcbiAgICB9O1xufVxuLyoqIENsZWFyIHByb2Nlc3NpbmcgaGlzdG9yeSAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNsZWFySGlzdG9yeSgpIHtcbiAgICBzZXNzaW9ucyA9IFtdO1xuICAgIHJlY29yZHMgPSBbXTtcbiAgICBjdXJyZW50U2Vzc2lvbiA9IG51bGw7XG4gICAgc2F2ZVRvU3RvcmFnZSgpO1xufVxuLyoqIEV4cG9ydCBwcm9jZXNzaW5nIGhpc3RvcnkgKi9cbmV4cG9ydCBmdW5jdGlvbiBleHBvcnRIaXN0b3J5KG9wdGlvbnMgPSB7IGZvcm1hdDogJ2pzb24nIH0pIHtcbiAgICB2YXIgX2E7XG4gICAgbGV0IGRhdGE7XG4gICAgaWYgKG9wdGlvbnMuZm9ybWF0ID09PSAnanNvbicpIHtcbiAgICAgICAgZGF0YSA9IHtcbiAgICAgICAgICAgIHNlc3Npb25zOiBnZXRTZXNzaW9ucygpLFxuICAgICAgICAgICAgcmVjb3JkczogZ2V0QWxsUmVjb3JkcygpLFxuICAgICAgICAgICAgc3RhdHM6IGdldFByb2Nlc3NpbmdTdGF0cyhvcHRpb25zLmRhdGVSYW5nZSksXG4gICAgICAgICAgICBleHBvcnRlZEF0OiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKClcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKCFvcHRpb25zLmluY2x1ZGVGaWxlRGV0YWlscykge1xuICAgICAgICAgICAgZGVsZXRlIGRhdGEucmVjb3JkcztcbiAgICAgICAgfVxuICAgICAgICBpZiAoIW9wdGlvbnMuaW5jbHVkZURldGVjdGlvbkRldGFpbHMpIHtcbiAgICAgICAgICAgIChfYSA9IGRhdGEucmVjb3JkcykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmZvckVhY2goKHJlY29yZCkgPT4ge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSByZWNvcmQuZGV0ZWN0aW9ucztcbiAgICAgICAgICAgICAgICBkZWxldGUgcmVjb3JkLmFwcGxpZWRSZWRhY3Rpb25zO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGRhdGEsIG51bGwsIDIpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgLy8gQ1NWIGZvcm1hdCAtIGZsYXR0ZW4gcmVjb3JkcyBmb3IgZWFzeSBhbmFseXNpc1xuICAgICAgICBjb25zdCBoZWFkZXJzID0gW1xuICAgICAgICAgICAgJ1Nlc3Npb24gSUQnLFxuICAgICAgICAgICAgJ0ZpbGUgTmFtZScsXG4gICAgICAgICAgICAnRmlsZSBTaXplJyxcbiAgICAgICAgICAgICdGaWxlIFR5cGUnLFxuICAgICAgICAgICAgJ1RpbWVzdGFtcCcsXG4gICAgICAgICAgICAnUHJvY2Vzc2luZyBUaW1lIChtcyknLFxuICAgICAgICAgICAgJ1N0YXR1cycsXG4gICAgICAgICAgICAnVG90YWwgRGV0ZWN0aW9ucycsXG4gICAgICAgICAgICAnQXZlcmFnZSBDb25maWRlbmNlJyxcbiAgICAgICAgICAgICdIaWdoIENvbmZpZGVuY2UgQ291bnQnLFxuICAgICAgICAgICAgJ01lZGl1bSBDb25maWRlbmNlIENvdW50JyxcbiAgICAgICAgICAgICdMb3cgQ29uZmlkZW5jZSBDb3VudCcsXG4gICAgICAgICAgICAnVG90YWwgUmVkYWN0aW9ucycsXG4gICAgICAgICAgICAnUHJlc2V0IE5hbWUnLFxuICAgICAgICAgICAgJ0Vycm9yJ1xuICAgICAgICBdO1xuICAgICAgICBjb25zdCByb3dzID0gZ2V0QWxsUmVjb3JkcygpLm1hcChyZWNvcmQgPT4ge1xuICAgICAgICAgICAgY29uc3Qgc2Vzc2lvbiA9IHNlc3Npb25zLmZpbmQocyA9PiBzLmlkID09PSByZWNvcmQuc2Vzc2lvbklkKTtcbiAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAgcmVjb3JkLnNlc3Npb25JZCxcbiAgICAgICAgICAgICAgICByZWNvcmQuZmlsZU5hbWUsXG4gICAgICAgICAgICAgICAgcmVjb3JkLmZpbGVTaXplLFxuICAgICAgICAgICAgICAgIHJlY29yZC5maWxlVHlwZSxcbiAgICAgICAgICAgICAgICByZWNvcmQudGltZXN0YW1wLFxuICAgICAgICAgICAgICAgIHJlY29yZC5wcm9jZXNzaW5nVGltZSxcbiAgICAgICAgICAgICAgICByZWNvcmQuc3RhdHVzLFxuICAgICAgICAgICAgICAgIHJlY29yZC50b3RhbERldGVjdGlvbnMsXG4gICAgICAgICAgICAgICAgcmVjb3JkLmF2ZXJhZ2VDb25maWRlbmNlLnRvRml4ZWQoMyksXG4gICAgICAgICAgICAgICAgcmVjb3JkLmNvbmZpZGVuY2VEaXN0cmlidXRpb24uaGlnaCxcbiAgICAgICAgICAgICAgICByZWNvcmQuY29uZmlkZW5jZURpc3RyaWJ1dGlvbi5tZWRpdW0sXG4gICAgICAgICAgICAgICAgcmVjb3JkLmNvbmZpZGVuY2VEaXN0cmlidXRpb24ubG93LFxuICAgICAgICAgICAgICAgIHJlY29yZC5yZWRhY3Rpb25TdGF0cy50b3RhbCxcbiAgICAgICAgICAgICAgICAoc2Vzc2lvbiA9PT0gbnVsbCB8fCBzZXNzaW9uID09PSB2b2lkIDAgPyB2b2lkIDAgOiBzZXNzaW9uLnByZXNldE5hbWUpIHx8ICcnLFxuICAgICAgICAgICAgICAgIHJlY29yZC5lcnJvciB8fCAnJ1xuICAgICAgICAgICAgXTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBbaGVhZGVycywgLi4ucm93c10ubWFwKHJvdyA9PiByb3cubWFwKGNlbGwgPT4gYFwiJHtTdHJpbmcoY2VsbCkucmVwbGFjZSgvXCIvZywgJ1wiXCInKX1cImApLmpvaW4oJywnKSkuam9pbignXFxuJyk7XG4gICAgfVxufVxuLyoqIEdldCBjdXJyZW50IGFjdGl2ZSBzZXNzaW9uICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q3VycmVudFNlc3Npb24oKSB7XG4gICAgcmV0dXJuIGN1cnJlbnRTZXNzaW9uO1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../core-detect/dist/history.js\n"));

/***/ }),

/***/ "../core-detect/dist/index.js":
/*!************************************!*\
  !*** ../core-detect/dist/index.js ***!
  \************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   analyzeDocument: function() { return /* reexport safe */ _pipeline_analyze__WEBPACK_IMPORTED_MODULE_1__.analyzeDocument; },\n/* harmony export */   applyRedactions: function() { return /* reexport safe */ _pipeline_apply__WEBPACK_IMPORTED_MODULE_2__.applyRedactions; }\n/* harmony export */ });\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./types */ \"../core-detect/dist/types.js\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _types__WEBPACK_IMPORTED_MODULE_0__) if([\"default\",\"analyzeDocument\",\"applyRedactions\"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = function(key) { return _types__WEBPACK_IMPORTED_MODULE_0__[key]; }.bind(0, __WEBPACK_IMPORT_KEY__)\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _pipeline_analyze__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./pipeline/analyze */ \"../core-detect/dist/pipeline/analyze.js\");\n/* harmony import */ var _pipeline_apply__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./pipeline/apply */ \"../core-detect/dist/pipeline/apply.js\");\n/* harmony import */ var _presets__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./presets */ \"../core-detect/dist/presets.js\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _presets__WEBPACK_IMPORTED_MODULE_3__) if([\"default\",\"analyzeDocument\",\"applyRedactions\"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = function(key) { return _presets__WEBPACK_IMPORTED_MODULE_3__[key]; }.bind(0, __WEBPACK_IMPORT_KEY__)\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _formats__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./formats */ \"../core-detect/dist/formats.js\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _formats__WEBPACK_IMPORTED_MODULE_4__) if([\"default\",\"analyzeDocument\",\"applyRedactions\"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = function(key) { return _formats__WEBPACK_IMPORTED_MODULE_4__[key]; }.bind(0, __WEBPACK_IMPORT_KEY__)\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _history__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./history */ \"../core-detect/dist/history.js\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _history__WEBPACK_IMPORTED_MODULE_5__) if([\"default\",\"analyzeDocument\",\"applyRedactions\"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = function(key) { return _history__WEBPACK_IMPORTED_MODULE_5__[key]; }.bind(0, __WEBPACK_IMPORT_KEY__)\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vY29yZS1kZXRlY3QvZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUF3QjtBQUM2QjtBQUNGO0FBQ3pCO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi4vY29yZS1kZXRlY3QvZGlzdC9pbmRleC5qcz81ZWNkIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gJy4vdHlwZXMnO1xuZXhwb3J0IHsgYW5hbHl6ZURvY3VtZW50IH0gZnJvbSAnLi9waXBlbGluZS9hbmFseXplJztcbmV4cG9ydCB7IGFwcGx5UmVkYWN0aW9ucyB9IGZyb20gJy4vcGlwZWxpbmUvYXBwbHknO1xuZXhwb3J0ICogZnJvbSAnLi9wcmVzZXRzJztcbmV4cG9ydCAqIGZyb20gJy4vZm9ybWF0cyc7XG5leHBvcnQgKiBmcm9tICcuL2hpc3RvcnknO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../core-detect/dist/index.js\n"));

/***/ })

});