"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "../core-detect/dist/detectors/index.js":
/*!**********************************************!*\
  !*** ../core-detect/dist/detectors/index.js ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   calculateConfidence: function() { return /* binding */ calculateConfidence; },\n/* harmony export */   detectCustomPatterns: function() { return /* binding */ detectCustomPatterns; },\n/* harmony export */   detectToken: function() { return /* binding */ detectToken; },\n/* harmony export */   detectTokenWithCustomPatterns: function() { return /* binding */ detectTokenWithCustomPatterns; },\n/* harmony export */   isAWSKey: function() { return /* binding */ isAWSKey; },\n/* harmony export */   isAddressComponent: function() { return /* binding */ isAddressComponent; },\n/* harmony export */   isJWT: function() { return /* binding */ isJWT; },\n/* harmony export */   isLuhnValid: function() { return /* binding */ isLuhnValid; },\n/* harmony export */   isValidIBAN: function() { return /* binding */ isValidIBAN; },\n/* harmony export */   isValidSSN: function() { return /* binding */ isValidSSN; },\n/* harmony export */   isValidUSPassport: function() { return /* binding */ isValidUSPassport; }\n/* harmony export */ });\n/**\n * Determine whether a string of digits represents a valid PAN according\n * to the Luhn checksum algorithm.  Only digits are considered; all\n * non‑numeric characters should be stripped before calling this function.\n */\nfunction isLuhnValid(value) {\n    let sum = 0;\n    let shouldDouble = false;\n    for (let i = value.length - 1; i >= 0; i--) {\n        const c = value.charCodeAt(i) - 48;\n        if (c < 0 || c > 9) {\n            return false;\n        }\n        let digit = c;\n        if (shouldDouble) {\n            digit *= 2;\n            if (digit > 9)\n                digit -= 9;\n        }\n        sum += digit;\n        shouldDouble = !shouldDouble;\n    }\n    return sum % 10 === 0;\n}\n/**\n * Validate an International Bank Account Number (IBAN) using the MOD 97\n * algorithm defined in ISO 13616.  Letters are mapped A=10, B=11, …\n * The function returns true when the IBAN appears structurally valid.  It\n * does not verify that the account exists.\n */\nfunction isValidIBAN(iban) {\n    const cleaned = iban.replace(/\\s+/g, '').toUpperCase();\n    // Basic length check: IBANs are between 15 and 34 characters long\n    if (cleaned.length < 15 || cleaned.length > 34)\n        return false;\n    // Move the four initial characters to the end of the string\n    const rearranged = cleaned.slice(4) + cleaned.slice(0, 4);\n    // Replace letters with numbers: A=10, B=11, …\n    let numeric = '';\n    for (const ch of rearranged) {\n        const code = ch.charCodeAt(0);\n        if (code >= 48 && code <= 57) {\n            numeric += ch;\n        }\n        else if (code >= 65 && code <= 90) {\n            numeric += (code - 55).toString();\n        }\n        else {\n            return false;\n        }\n    }\n    // Compute the remainder using mod 97\n    let remainder = 0;\n    for (let i = 0; i < numeric.length; i++) {\n        remainder = (remainder * 10 + Number(numeric[i])) % 97;\n    }\n    return remainder === 1;\n}\n/**\n * Validate a US Social Security Number (SSN).  Performs basic\n * structural checks: XXX-XX-XXXX where the area number is not 000,\n * 666, or between 900–999; the group number is not 00; and the serial\n * number is not 0000.\n */\nfunction isValidSSN(value) {\n    const ssnRegex = /^(\\d{3})-(\\d{2})-(\\d{4})$/;\n    const match = ssnRegex.exec(value);\n    if (!match)\n        return false;\n    const area = parseInt(match[1], 10);\n    const group = parseInt(match[2], 10);\n    const serial = parseInt(match[3], 10);\n    if (area === 0 || group === 0 || serial === 0)\n        return false;\n    if (area === 666 || area >= 900)\n        return false;\n    return true;\n}\n/**\n * Validate US passport number format. US passports are typically 9 digits\n * or 1 letter followed by 8 digits (newer format).\n */\nfunction isValidUSPassport(value) {\n    const cleaned = value.replace(/\\s+/g, '');\n    // Format 1: 9 digits (older format)\n    if (/^\\d{9}$/.test(cleaned))\n        return true;\n    // Format 2: 1 letter + 8 digits (newer format) \n    if (/^[A-Z]\\d{8}$/.test(cleaned))\n        return true;\n    return false;\n}\n/**\n * Enhanced address detection with common address components\n */\nfunction isAddressComponent(value) {\n    const token = value.trim();\n    // Street suffixes (high confidence)\n    const streetSuffixes = /^(Street|St\\.?|Avenue|Ave\\.?|Road|Rd\\.?|Lane|Ln\\.?|Boulevard|Blvd\\.?|Drive|Dr\\.?|Circle|Cir\\.?|Court|Ct\\.?|Place|Pl\\.?|Way|Parkway|Pkwy\\.?)$/i;\n    if (streetSuffixes.test(token)) {\n        return { isAddress: true, confidence: 0.95, reason: 'Street type indicator' };\n    }\n    // Directional indicators (medium confidence)\n    const directions = /^(North|N\\.?|South|S\\.?|East|E\\.?|West|W\\.?|Northeast|NE\\.?|Northwest|NW\\.?|Southeast|SE\\.?|Southwest|SW\\.?)$/i;\n    if (directions.test(token)) {\n        return { isAddress: true, confidence: 0.7, reason: 'Directional indicator' };\n    }\n    // Address with numbers (medium confidence)\n    if (/\\d/.test(token) && token.length >= 3) {\n        // House numbers, apartment numbers, ZIP codes\n        if (/^\\d{1,5}[A-Z]?$/.test(token) || /^\\d{5}(-\\d{4})?$/.test(token)) {\n            return { isAddress: true, confidence: 0.8, reason: 'House number or ZIP code pattern' };\n        }\n        if (/^#?\\d+[A-Z]?$/.test(token) || /^(Apt|Suite|Unit|Ste|#)\\s*\\d+[A-Z]?$/i.test(token)) {\n            return { isAddress: true, confidence: 0.85, reason: 'Apartment/suite number' };\n        }\n        // Generic number in address context\n        return { isAddress: true, confidence: 0.6, reason: 'Contains digits and could be part of address' };\n    }\n    // State abbreviations (high confidence)\n    const stateAbbrev = /^(AL|AK|AZ|AR|CA|CO|CT|DE|FL|GA|HI|ID|IL|IN|IA|KS|KY|LA|ME|MD|MA|MI|MN|MS|MO|MT|NE|NV|NH|NJ|NM|NY|NC|ND|OH|OK|OR|PA|RI|SC|SD|TN|TX|UT|VT|VA|WA|WV|WI|WY|DC)$/;\n    if (stateAbbrev.test(token.toUpperCase())) {\n        return { isAddress: true, confidence: 0.9, reason: 'US state abbreviation' };\n    }\n    return { isAddress: false, confidence: 0, reason: '' };\n}\n/**\n * Calculate confidence score for detection based on pattern strength and context\n */\nfunction calculateConfidence(kind, token, ocrConfidence = 0.9) {\n    const base = Math.min(ocrConfidence, 0.95); // Cap OCR confidence\n    switch (kind) {\n        case 'EMAIL':\n            // Higher confidence for well-formed emails\n            return token.includes('@') && token.includes('.') ? Math.min(base + 0.05, 1.0) : base * 0.8;\n        case 'PHONE':\n            const digits = token.replace(/\\D/g, '');\n            // Higher confidence for standard formats\n            if (digits.length === 10 || digits.length === 11)\n                return Math.min(base + 0.1, 1.0);\n            if (digits.length >= 7 && digits.length <= 15)\n                return base * 0.9;\n            return base * 0.7;\n        case 'PAN':\n            // Credit cards with Luhn validation get high confidence\n            return Math.min(base + 0.1, 1.0);\n        case 'SSN':\n            // SSN with proper validation gets high confidence\n            return Math.min(base + 0.15, 1.0);\n        case 'PASSPORT':\n            // Passport numbers get medium-high confidence\n            return Math.min(base + 0.05, 1.0);\n        case 'IBAN':\n            // IBAN with MOD 97 validation gets high confidence\n            return Math.min(base + 0.1, 1.0);\n        case 'ADDRESS':\n            // Address confidence varies by component type - handled in isAddressComponent\n            return base;\n        case 'NAME':\n            // Names are tricky - lower confidence to reduce false positives\n            return base * 0.7;\n        case 'BARCODE':\n            // QR codes/barcodes are typically very reliable\n            return 1.0;\n        case 'JWT':\n            // JWT format is distinctive\n            return Math.min(base + 0.05, 1.0);\n        case 'API_KEY':\n            // API keys have distinctive patterns\n            return Math.min(base + 0.1, 1.0);\n        default:\n            return base;\n    }\n}\n/** Detect whether a token is formatted like a JSON Web Token (JWT). */\nfunction isJWT(value) {\n    return /^[A-Za-z0-9_-]+\\.[A-Za-z0-9_-]+\\.[A-Za-z0-9_-]+$/.test(value.trim());\n}\n/** Detect whether a token looks like an AWS access key ID.  AWS keys\n * typically start with AKIA or ASIA followed by 16 uppercase letters or\n * digits. */\nfunction isAWSKey(value) {\n    return /^(A(KIA|SIA)[A-Z0-9]{16})$/.test(value.trim());\n}\n/**\n * Perform high‑level detection for a single token.  If the token matches\n * a sensitive pattern, this function returns an object describing the\n * detection; otherwise it returns null.  Note that this function does\n * not compute bounding boxes – it only classifies the token.  Bounding\n * boxes are provided by the OCR engine.\n */\nfunction detectToken(token) {\n    const raw = token.trim();\n    if (!raw)\n        return null;\n    // PAN (credit card number) – 13–19 digits with Luhn valid (check first to avoid phone conflicts)\n    const digitsOnly = raw.replace(/\\D/g, '');\n    if (digitsOnly.length >= 13 && digitsOnly.length <= 19 && isLuhnValid(digitsOnly)) {\n        return { kind: 'PAN', reason: 'Luhn valid primary account number', confidence: 0.95 };\n    }\n    // IBAN (starts with two letters followed by digits and letters)\n    const ibanPattern = /^[A-Z]{2}[0-9A-Z]{13,32}$/i;\n    if (ibanPattern.test(raw) && isValidIBAN(raw)) {\n        return { kind: 'IBAN', reason: 'Valid IBAN checksum', confidence: 0.95 };\n    }\n    // SSN (US format) - check before general phone patterns, including invalid ones\n    const ssnPattern = /^\\d{3}-\\d{2}-\\d{4}$/;\n    if (ssnPattern.test(raw)) {\n        if (isValidSSN(raw)) {\n            return { kind: 'SSN', reason: 'Valid US SSN format', confidence: 0.95 };\n        }\n        // Don't detect invalid SSNs as other types\n        return null;\n    }\n    // Passport number (US format)\n    const passportPattern = /^[A-Z]?\\d{8,9}$/i;\n    if (passportPattern.test(raw) && isValidUSPassport(raw.toUpperCase())) {\n        return { kind: 'PASSPORT', reason: 'Valid US passport number format', confidence: 0.9 };\n    }\n    // JWT - check early to prevent JWT being detected as address (contains many digits)\n    if (isJWT(raw) && raw.length > 50) {\n        return { kind: 'JWT', reason: 'Looks like a JWT token', confidence: 0.9 };\n    }\n    // Email - more strict pattern to reduce false positives\n    const emailPattern = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i;\n    if (emailPattern.test(raw) && raw.includes('@') && raw.includes('.')) {\n        return { kind: 'EMAIL', reason: 'Matches email pattern', confidence: 0.9 };\n    }\n    // Phone number - enhanced detection with format validation\n    if (digitsOnly.length >= 7 && /\\d{3,}/.test(digitsOnly)) {\n        // North American format (10-11 digits)\n        if (digitsOnly.length === 10 || (digitsOnly.length === 11 && digitsOnly[0] === '1')) {\n            return { kind: 'PHONE', reason: 'North American phone format', confidence: 0.85 };\n        }\n        // International format (7-15 digits)\n        if (digitsOnly.length >= 7 && digitsOnly.length <= 15) {\n            return { kind: 'PHONE', reason: 'International phone format', confidence: 0.75 };\n        }\n    }\n    // Enhanced address detection\n    const addressResult = isAddressComponent(raw);\n    if (addressResult.isAddress) {\n        return { kind: 'ADDRESS', reason: addressResult.reason, confidence: addressResult.confidence };\n    }\n    // AWS access key id\n    if (isAWSKey(raw)) {\n        return { kind: 'API_KEY', reason: 'Looks like an AWS access key', confidence: 0.95 };\n    }\n    // Names (proper nouns) - enhanced with false positive reduction\n    const namePattern = /^[A-Z][a-z]{2,}$/;\n    if (namePattern.test(raw) && !/\\d/.test(raw) && raw.toUpperCase() !== raw) {\n        // Exclude common words that aren't names\n        const commonWords = /^(The|And|But|For|Are|This|That|With|Have|Will|From|They|Know|Want|Been|Good|Much|Some|Time|Very|When|Come|Here|Just|Like|Long|Make|Many|Over|Such|Take|Than|Them|Well|Were|What|Your|After|Before|Could|First|Found|Great|Other|Right|Should|These|Where|Which|While|Would|Years|Young|About|Again|Place|State|Still|Think|Three|Through|Under|Water|Write)$/i;\n        if (!commonWords.test(raw)) {\n            return { kind: 'NAME', reason: 'Likely proper name', confidence: 0.6 };\n        }\n    }\n    return null;\n}\n/**\n * Apply custom detection patterns to a token\n */\nfunction detectCustomPatterns(token, customPatterns) {\n    if (!customPatterns || customPatterns.length === 0)\n        return null;\n    for (const pattern of customPatterns) {\n        try {\n            const flags = pattern.caseSensitive === false ? 'i' : '';\n            const regex = new RegExp(pattern.pattern, flags);\n            if (regex.test(token)) {\n                return {\n                    kind: pattern.kind,\n                    reason: `Custom pattern: ${pattern.name}`,\n                    confidence: pattern.confidence\n                };\n            }\n        }\n        catch (error) {\n            // Skip invalid regex patterns\n            console.warn(`Invalid custom pattern ${pattern.id}: ${error}`);\n            continue;\n        }\n    }\n    return null;\n}\n/**\n * Enhanced detectToken that includes custom pattern support\n */\nfunction detectTokenWithCustomPatterns(token, customPatterns) {\n    // First check custom patterns (they take precedence)\n    if (customPatterns && customPatterns.length > 0) {\n        const customResult = detectCustomPatterns(token, customPatterns);\n        if (customResult)\n            return customResult;\n    }\n    // Fall back to standard detection\n    return detectToken(token);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../core-detect/dist/detectors/index.js\n"));

/***/ })

});