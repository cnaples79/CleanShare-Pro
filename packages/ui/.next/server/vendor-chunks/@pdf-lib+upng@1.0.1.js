"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@pdf-lib+upng@1.0.1";
exports.ids = ["vendor-chunks/@pdf-lib+upng@1.0.1"];
exports.modules = {

/***/ "../../node_modules/.pnpm/@pdf-lib+upng@1.0.1/node_modules/@pdf-lib/upng/cjs/UPNG.js":
/*!*******************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@pdf-lib+upng@1.0.1/node_modules/@pdf-lib/upng/cjs/UPNG.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\n\nvar _pako = _interopRequireDefault(__webpack_require__(/*! pako */ \"../../node_modules/.pnpm/pako@1.0.11/node_modules/pako/index.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar UPNG = {};\n\nUPNG.toRGBA8 = function (out) {\n  var w = out.width,\n      h = out.height;\n  if (out.tabs.acTL == null) return [UPNG.toRGBA8.decodeImage(out.data, w, h, out).buffer];\n  var frms = [];\n  if (out.frames[0].data == null) out.frames[0].data = out.data;\n  var len = w * h * 4,\n      img = new Uint8Array(len),\n      empty = new Uint8Array(len),\n      prev = new Uint8Array(len);\n\n  for (var i = 0; i < out.frames.length; i++) {\n    var frm = out.frames[i];\n    var fx = frm.rect.x,\n        fy = frm.rect.y,\n        fw = frm.rect.width,\n        fh = frm.rect.height;\n    var fdata = UPNG.toRGBA8.decodeImage(frm.data, fw, fh, out);\n    if (i != 0) for (var j = 0; j < len; j++) prev[j] = img[j];\n    if (frm.blend == 0) UPNG._copyTile(fdata, fw, fh, img, w, h, fx, fy, 0);else if (frm.blend == 1) UPNG._copyTile(fdata, fw, fh, img, w, h, fx, fy, 1);\n    frms.push(img.buffer.slice(0));\n\n    if (frm.dispose == 0) {} else if (frm.dispose == 1) UPNG._copyTile(empty, fw, fh, img, w, h, fx, fy, 0);else if (frm.dispose == 2) for (var j = 0; j < len; j++) img[j] = prev[j];\n  }\n\n  return frms;\n};\n\nUPNG.toRGBA8.decodeImage = function (data, w, h, out) {\n  var area = w * h,\n      bpp = UPNG.decode._getBPP(out);\n\n  var bpl = Math.ceil(w * bpp / 8); // bytes per line\n\n  var bf = new Uint8Array(area * 4),\n      bf32 = new Uint32Array(bf.buffer);\n  var ctype = out.ctype,\n      depth = out.depth;\n  var rs = UPNG._bin.readUshort; //console.log(ctype, depth);\n\n  var time = Date.now();\n\n  if (ctype == 6) {\n    // RGB + alpha\n    var qarea = area << 2;\n    if (depth == 8) for (var i = 0; i < qarea; i += 4) {\n      bf[i] = data[i];\n      bf[i + 1] = data[i + 1];\n      bf[i + 2] = data[i + 2];\n      bf[i + 3] = data[i + 3];\n    }\n    if (depth == 16) for (var i = 0; i < qarea; i++) {\n      bf[i] = data[i << 1];\n    }\n  } else if (ctype == 2) {\n    // RGB\n    var ts = out.tabs[\"tRNS\"];\n\n    if (ts == null) {\n      if (depth == 8) for (var i = 0; i < area; i++) {\n        var ti = i * 3;\n        bf32[i] = 255 << 24 | data[ti + 2] << 16 | data[ti + 1] << 8 | data[ti];\n      }\n      if (depth == 16) for (var i = 0; i < area; i++) {\n        var ti = i * 6;\n        bf32[i] = 255 << 24 | data[ti + 4] << 16 | data[ti + 2] << 8 | data[ti];\n      }\n    } else {\n      var tr = ts[0],\n          tg = ts[1],\n          tb = ts[2];\n      if (depth == 8) for (var i = 0; i < area; i++) {\n        var qi = i << 2,\n            ti = i * 3;\n        bf32[i] = 255 << 24 | data[ti + 2] << 16 | data[ti + 1] << 8 | data[ti];\n        if (data[ti] == tr && data[ti + 1] == tg && data[ti + 2] == tb) bf[qi + 3] = 0;\n      }\n      if (depth == 16) for (var i = 0; i < area; i++) {\n        var qi = i << 2,\n            ti = i * 6;\n        bf32[i] = 255 << 24 | data[ti + 4] << 16 | data[ti + 2] << 8 | data[ti];\n        if (rs(data, ti) == tr && rs(data, ti + 2) == tg && rs(data, ti + 4) == tb) bf[qi + 3] = 0;\n      }\n    }\n  } else if (ctype == 3) {\n    // palette\n    var p = out.tabs[\"PLTE\"],\n        ap = out.tabs[\"tRNS\"],\n        tl = ap ? ap.length : 0; //console.log(p, ap);\n\n    if (depth == 1) for (var y = 0; y < h; y++) {\n      var s0 = y * bpl,\n          t0 = y * w;\n\n      for (var i = 0; i < w; i++) {\n        var qi = t0 + i << 2,\n            j = data[s0 + (i >> 3)] >> 7 - ((i & 7) << 0) & 1,\n            cj = 3 * j;\n        bf[qi] = p[cj];\n        bf[qi + 1] = p[cj + 1];\n        bf[qi + 2] = p[cj + 2];\n        bf[qi + 3] = j < tl ? ap[j] : 255;\n      }\n    }\n    if (depth == 2) for (var y = 0; y < h; y++) {\n      var s0 = y * bpl,\n          t0 = y * w;\n\n      for (var i = 0; i < w; i++) {\n        var qi = t0 + i << 2,\n            j = data[s0 + (i >> 2)] >> 6 - ((i & 3) << 1) & 3,\n            cj = 3 * j;\n        bf[qi] = p[cj];\n        bf[qi + 1] = p[cj + 1];\n        bf[qi + 2] = p[cj + 2];\n        bf[qi + 3] = j < tl ? ap[j] : 255;\n      }\n    }\n    if (depth == 4) for (var y = 0; y < h; y++) {\n      var s0 = y * bpl,\n          t0 = y * w;\n\n      for (var i = 0; i < w; i++) {\n        var qi = t0 + i << 2,\n            j = data[s0 + (i >> 1)] >> 4 - ((i & 1) << 2) & 15,\n            cj = 3 * j;\n        bf[qi] = p[cj];\n        bf[qi + 1] = p[cj + 1];\n        bf[qi + 2] = p[cj + 2];\n        bf[qi + 3] = j < tl ? ap[j] : 255;\n      }\n    }\n    if (depth == 8) for (var i = 0; i < area; i++) {\n      var qi = i << 2,\n          j = data[i],\n          cj = 3 * j;\n      bf[qi] = p[cj];\n      bf[qi + 1] = p[cj + 1];\n      bf[qi + 2] = p[cj + 2];\n      bf[qi + 3] = j < tl ? ap[j] : 255;\n    }\n  } else if (ctype == 4) {\n    // gray + alpha\n    if (depth == 8) for (var i = 0; i < area; i++) {\n      var qi = i << 2,\n          di = i << 1,\n          gr = data[di];\n      bf[qi] = gr;\n      bf[qi + 1] = gr;\n      bf[qi + 2] = gr;\n      bf[qi + 3] = data[di + 1];\n    }\n    if (depth == 16) for (var i = 0; i < area; i++) {\n      var qi = i << 2,\n          di = i << 2,\n          gr = data[di];\n      bf[qi] = gr;\n      bf[qi + 1] = gr;\n      bf[qi + 2] = gr;\n      bf[qi + 3] = data[di + 2];\n    }\n  } else if (ctype == 0) {\n    // gray\n    var tr = out.tabs[\"tRNS\"] ? out.tabs[\"tRNS\"] : -1;\n\n    for (var y = 0; y < h; y++) {\n      var off = y * bpl,\n          to = y * w;\n      if (depth == 1) for (var x = 0; x < w; x++) {\n        var gr = 255 * (data[off + (x >>> 3)] >>> 7 - (x & 7) & 1),\n            al = gr == tr * 255 ? 0 : 255;\n        bf32[to + x] = al << 24 | gr << 16 | gr << 8 | gr;\n      } else if (depth == 2) for (var x = 0; x < w; x++) {\n        var gr = 85 * (data[off + (x >>> 2)] >>> 6 - ((x & 3) << 1) & 3),\n            al = gr == tr * 85 ? 0 : 255;\n        bf32[to + x] = al << 24 | gr << 16 | gr << 8 | gr;\n      } else if (depth == 4) for (var x = 0; x < w; x++) {\n        var gr = 17 * (data[off + (x >>> 1)] >>> 4 - ((x & 1) << 2) & 15),\n            al = gr == tr * 17 ? 0 : 255;\n        bf32[to + x] = al << 24 | gr << 16 | gr << 8 | gr;\n      } else if (depth == 8) for (var x = 0; x < w; x++) {\n        var gr = data[off + x],\n            al = gr == tr ? 0 : 255;\n        bf32[to + x] = al << 24 | gr << 16 | gr << 8 | gr;\n      } else if (depth == 16) for (var x = 0; x < w; x++) {\n        var gr = data[off + (x << 1)],\n            al = rs(data, off + (x << i)) == tr ? 0 : 255;\n        bf32[to + x] = al << 24 | gr << 16 | gr << 8 | gr;\n      }\n    }\n  } //console.log(Date.now()-time);\n\n\n  return bf;\n};\n\nUPNG.decode = function (buff) {\n  var data = new Uint8Array(buff),\n      offset = 8,\n      bin = UPNG._bin,\n      rUs = bin.readUshort,\n      rUi = bin.readUint;\n  var out = {\n    tabs: {},\n    frames: []\n  };\n  var dd = new Uint8Array(data.length),\n      doff = 0; // put all IDAT data into it\n\n  var fd,\n      foff = 0; // frames\n\n  var mgck = [0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a];\n\n  for (var i = 0; i < 8; i++) if (data[i] != mgck[i]) throw \"The input is not a PNG file!\";\n\n  while (offset < data.length) {\n    var len = bin.readUint(data, offset);\n    offset += 4;\n    var type = bin.readASCII(data, offset, 4);\n    offset += 4; //console.log(type,len);\n\n    if (type == \"IHDR\") {\n      UPNG.decode._IHDR(data, offset, out);\n    } else if (type == \"IDAT\") {\n      for (var i = 0; i < len; i++) dd[doff + i] = data[offset + i];\n\n      doff += len;\n    } else if (type == \"acTL\") {\n      out.tabs[type] = {\n        num_frames: rUi(data, offset),\n        num_plays: rUi(data, offset + 4)\n      };\n      fd = new Uint8Array(data.length);\n    } else if (type == \"fcTL\") {\n      if (foff != 0) {\n        var fr = out.frames[out.frames.length - 1];\n        fr.data = UPNG.decode._decompress(out, fd.slice(0, foff), fr.rect.width, fr.rect.height);\n        foff = 0;\n      }\n\n      var rct = {\n        x: rUi(data, offset + 12),\n        y: rUi(data, offset + 16),\n        width: rUi(data, offset + 4),\n        height: rUi(data, offset + 8)\n      };\n      var del = rUs(data, offset + 22);\n      del = rUs(data, offset + 20) / (del == 0 ? 100 : del);\n      var frm = {\n        rect: rct,\n        delay: Math.round(del * 1000),\n        dispose: data[offset + 24],\n        blend: data[offset + 25]\n      }; //console.log(frm);\n\n      out.frames.push(frm);\n    } else if (type == \"fdAT\") {\n      for (var i = 0; i < len - 4; i++) fd[foff + i] = data[offset + i + 4];\n\n      foff += len - 4;\n    } else if (type == \"pHYs\") {\n      out.tabs[type] = [bin.readUint(data, offset), bin.readUint(data, offset + 4), data[offset + 8]];\n    } else if (type == \"cHRM\") {\n      out.tabs[type] = [];\n\n      for (var i = 0; i < 8; i++) out.tabs[type].push(bin.readUint(data, offset + i * 4));\n    } else if (type == \"tEXt\") {\n      if (out.tabs[type] == null) out.tabs[type] = {};\n      var nz = bin.nextZero(data, offset);\n      var keyw = bin.readASCII(data, offset, nz - offset);\n      var text = bin.readASCII(data, nz + 1, offset + len - nz - 1);\n      out.tabs[type][keyw] = text;\n    } else if (type == \"iTXt\") {\n      if (out.tabs[type] == null) out.tabs[type] = {};\n      var nz = 0,\n          off = offset;\n      nz = bin.nextZero(data, off);\n      var keyw = bin.readASCII(data, off, nz - off);\n      off = nz + 1;\n      var cflag = data[off],\n          cmeth = data[off + 1];\n      off += 2;\n      nz = bin.nextZero(data, off);\n      var ltag = bin.readASCII(data, off, nz - off);\n      off = nz + 1;\n      nz = bin.nextZero(data, off);\n      var tkeyw = bin.readUTF8(data, off, nz - off);\n      off = nz + 1;\n      var text = bin.readUTF8(data, off, len - (off - offset));\n      out.tabs[type][keyw] = text;\n    } else if (type == \"PLTE\") {\n      out.tabs[type] = bin.readBytes(data, offset, len);\n    } else if (type == \"hIST\") {\n      var pl = out.tabs[\"PLTE\"].length / 3;\n      out.tabs[type] = [];\n\n      for (var i = 0; i < pl; i++) out.tabs[type].push(rUs(data, offset + i * 2));\n    } else if (type == \"tRNS\") {\n      if (out.ctype == 3) out.tabs[type] = bin.readBytes(data, offset, len);else if (out.ctype == 0) out.tabs[type] = rUs(data, offset);else if (out.ctype == 2) out.tabs[type] = [rUs(data, offset), rUs(data, offset + 2), rUs(data, offset + 4)]; //else console.log(\"tRNS for unsupported color type\",out.ctype, len);\n    } else if (type == \"gAMA\") out.tabs[type] = bin.readUint(data, offset) / 100000;else if (type == \"sRGB\") out.tabs[type] = data[offset];else if (type == \"bKGD\") {\n      if (out.ctype == 0 || out.ctype == 4) out.tabs[type] = [rUs(data, offset)];else if (out.ctype == 2 || out.ctype == 6) out.tabs[type] = [rUs(data, offset), rUs(data, offset + 2), rUs(data, offset + 4)];else if (out.ctype == 3) out.tabs[type] = data[offset];\n    } else if (type == \"IEND\") {\n      break;\n    } //else {  log(\"unknown chunk type\", type, len);  }\n\n\n    offset += len;\n    var crc = bin.readUint(data, offset);\n    offset += 4;\n  }\n\n  if (foff != 0) {\n    var fr = out.frames[out.frames.length - 1];\n    fr.data = UPNG.decode._decompress(out, fd.slice(0, foff), fr.rect.width, fr.rect.height);\n    foff = 0;\n  }\n\n  out.data = UPNG.decode._decompress(out, dd, out.width, out.height);\n  delete out.compress;\n  delete out.interlace;\n  delete out.filter;\n  return out;\n};\n\nUPNG.decode._decompress = function (out, dd, w, h) {\n  var time = Date.now();\n\n  var bpp = UPNG.decode._getBPP(out),\n      bpl = Math.ceil(w * bpp / 8),\n      buff = new Uint8Array((bpl + 1 + out.interlace) * h);\n\n  dd = UPNG.decode._inflate(dd, buff); //console.log(dd.length, buff.length);\n  //console.log(Date.now()-time);\n\n  var time = Date.now();\n  if (out.interlace == 0) dd = UPNG.decode._filterZero(dd, out, 0, w, h);else if (out.interlace == 1) dd = UPNG.decode._readInterlace(dd, out); //console.log(Date.now()-time);\n\n  return dd;\n};\n\nUPNG.decode._inflate = function (data, buff) {\n  var out = UPNG[\"inflateRaw\"](new Uint8Array(data.buffer, 2, data.length - 6), buff);\n  return out;\n};\n\nUPNG.inflateRaw = function () {\n  var H = {};\n  H.H = {};\n\n  H.H.N = function (N, W) {\n    var R = Uint8Array,\n        i = 0,\n        m = 0,\n        J = 0,\n        h = 0,\n        Q = 0,\n        X = 0,\n        u = 0,\n        w = 0,\n        d = 0,\n        v,\n        C;\n    if (N[0] == 3 && N[1] == 0) return W ? W : new R(0);\n    var V = H.H,\n        n = V.b,\n        A = V.e,\n        l = V.R,\n        M = V.n,\n        I = V.A,\n        e = V.Z,\n        b = V.m,\n        Z = W == null;\n    if (Z) W = new R(N.length >>> 2 << 3);\n\n    while (i == 0) {\n      i = n(N, d, 1);\n      m = n(N, d + 1, 2);\n      d += 3;\n\n      if (m == 0) {\n        if ((d & 7) != 0) d += 8 - (d & 7);\n        var D = (d >>> 3) + 4,\n            q = N[D - 4] | N[D - 3] << 8;\n        if (Z) W = H.H.W(W, w + q);\n        W.set(new R(N.buffer, N.byteOffset + D, q), w);\n        d = D + q << 3;\n        w += q;\n        continue;\n      }\n\n      if (Z) W = H.H.W(W, w + (1 << 17));\n\n      if (m == 1) {\n        v = b.J;\n        C = b.h;\n        X = (1 << 9) - 1;\n        u = (1 << 5) - 1;\n      }\n\n      if (m == 2) {\n        J = A(N, d, 5) + 257;\n        h = A(N, d + 5, 5) + 1;\n        Q = A(N, d + 10, 4) + 4;\n        d += 14;\n        var E = d,\n            j = 1;\n\n        for (var c = 0; c < 38; c += 2) {\n          b.Q[c] = 0;\n          b.Q[c + 1] = 0;\n        }\n\n        for (var c = 0; c < Q; c++) {\n          var K = A(N, d + c * 3, 3);\n          b.Q[(b.X[c] << 1) + 1] = K;\n          if (K > j) j = K;\n        }\n\n        d += 3 * Q;\n        M(b.Q, j);\n        I(b.Q, j, b.u);\n        v = b.w;\n        C = b.d;\n        d = l(b.u, (1 << j) - 1, J + h, N, d, b.v);\n        var r = V.V(b.v, 0, J, b.C);\n        X = (1 << r) - 1;\n        var S = V.V(b.v, J, h, b.D);\n        u = (1 << S) - 1;\n        M(b.C, r);\n        I(b.C, r, v);\n        M(b.D, S);\n        I(b.D, S, C);\n      }\n\n      while (!0) {\n        var T = v[e(N, d) & X];\n        d += T & 15;\n        var p = T >>> 4;\n\n        if (p >>> 8 == 0) {\n          W[w++] = p;\n        } else if (p == 256) {\n          break;\n        } else {\n          var z = w + p - 254;\n\n          if (p > 264) {\n            var _ = b.q[p - 257];\n            z = w + (_ >>> 3) + A(N, d, _ & 7);\n            d += _ & 7;\n          }\n\n          var $ = C[e(N, d) & u];\n          d += $ & 15;\n          var s = $ >>> 4,\n              Y = b.c[s],\n              a = (Y >>> 4) + n(N, d, Y & 15);\n          d += Y & 15;\n\n          while (w < z) {\n            W[w] = W[w++ - a];\n            W[w] = W[w++ - a];\n            W[w] = W[w++ - a];\n            W[w] = W[w++ - a];\n          }\n\n          w = z;\n        }\n      }\n    }\n\n    return W.length == w ? W : W.slice(0, w);\n  };\n\n  H.H.W = function (N, W) {\n    var R = N.length;\n    if (W <= R) return N;\n    var V = new Uint8Array(R << 1);\n    V.set(N, 0);\n    return V;\n  };\n\n  H.H.R = function (N, W, R, V, n, A) {\n    var l = H.H.e,\n        M = H.H.Z,\n        I = 0;\n\n    while (I < R) {\n      var e = N[M(V, n) & W];\n      n += e & 15;\n      var b = e >>> 4;\n\n      if (b <= 15) {\n        A[I] = b;\n        I++;\n      } else {\n        var Z = 0,\n            m = 0;\n\n        if (b == 16) {\n          m = 3 + l(V, n, 2);\n          n += 2;\n          Z = A[I - 1];\n        } else if (b == 17) {\n          m = 3 + l(V, n, 3);\n          n += 3;\n        } else if (b == 18) {\n          m = 11 + l(V, n, 7);\n          n += 7;\n        }\n\n        var J = I + m;\n\n        while (I < J) {\n          A[I] = Z;\n          I++;\n        }\n      }\n    }\n\n    return n;\n  };\n\n  H.H.V = function (N, W, R, V) {\n    var n = 0,\n        A = 0,\n        l = V.length >>> 1;\n\n    while (A < R) {\n      var M = N[A + W];\n      V[A << 1] = 0;\n      V[(A << 1) + 1] = M;\n      if (M > n) n = M;\n      A++;\n    }\n\n    while (A < l) {\n      V[A << 1] = 0;\n      V[(A << 1) + 1] = 0;\n      A++;\n    }\n\n    return n;\n  };\n\n  H.H.n = function (N, W) {\n    var R = H.H.m,\n        V = N.length,\n        n,\n        A,\n        l,\n        M,\n        I,\n        e = R.j;\n\n    for (var M = 0; M <= W; M++) e[M] = 0;\n\n    for (M = 1; M < V; M += 2) e[N[M]]++;\n\n    var b = R.K;\n    n = 0;\n    e[0] = 0;\n\n    for (A = 1; A <= W; A++) {\n      n = n + e[A - 1] << 1;\n      b[A] = n;\n    }\n\n    for (l = 0; l < V; l += 2) {\n      I = N[l + 1];\n\n      if (I != 0) {\n        N[l] = b[I];\n        b[I]++;\n      }\n    }\n  };\n\n  H.H.A = function (N, W, R) {\n    var V = N.length,\n        n = H.H.m,\n        A = n.r;\n\n    for (var l = 0; l < V; l += 2) if (N[l + 1] != 0) {\n      var M = l >> 1,\n          I = N[l + 1],\n          e = M << 4 | I,\n          b = W - I,\n          Z = N[l] << b,\n          m = Z + (1 << b);\n\n      while (Z != m) {\n        var J = A[Z] >>> 15 - W;\n        R[J] = e;\n        Z++;\n      }\n    }\n  };\n\n  H.H.l = function (N, W) {\n    var R = H.H.m.r,\n        V = 15 - W;\n\n    for (var n = 0; n < N.length; n += 2) {\n      var A = N[n] << W - N[n + 1];\n      N[n] = R[A] >>> V;\n    }\n  };\n\n  H.H.M = function (N, W, R) {\n    R = R << (W & 7);\n    var V = W >>> 3;\n    N[V] |= R;\n    N[V + 1] |= R >>> 8;\n  };\n\n  H.H.I = function (N, W, R) {\n    R = R << (W & 7);\n    var V = W >>> 3;\n    N[V] |= R;\n    N[V + 1] |= R >>> 8;\n    N[V + 2] |= R >>> 16;\n  };\n\n  H.H.e = function (N, W, R) {\n    return (N[W >>> 3] | N[(W >>> 3) + 1] << 8) >>> (W & 7) & (1 << R) - 1;\n  };\n\n  H.H.b = function (N, W, R) {\n    return (N[W >>> 3] | N[(W >>> 3) + 1] << 8 | N[(W >>> 3) + 2] << 16) >>> (W & 7) & (1 << R) - 1;\n  };\n\n  H.H.Z = function (N, W) {\n    return (N[W >>> 3] | N[(W >>> 3) + 1] << 8 | N[(W >>> 3) + 2] << 16) >>> (W & 7);\n  };\n\n  H.H.i = function (N, W) {\n    return (N[W >>> 3] | N[(W >>> 3) + 1] << 8 | N[(W >>> 3) + 2] << 16 | N[(W >>> 3) + 3] << 24) >>> (W & 7);\n  };\n\n  H.H.m = function () {\n    var N = Uint16Array,\n        W = Uint32Array;\n    return {\n      K: new N(16),\n      j: new N(16),\n      X: [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15],\n      S: [3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 999, 999, 999],\n      T: [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 0, 0, 0],\n      q: new N(32),\n      p: [1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577, 65535, 65535],\n      z: [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 0, 0],\n      c: new W(32),\n      J: new N(512),\n      _: [],\n      h: new N(32),\n      $: [],\n      w: new N(32768),\n      C: [],\n      v: [],\n      d: new N(32768),\n      D: [],\n      u: new N(512),\n      Q: [],\n      r: new N(1 << 15),\n      s: new W(286),\n      Y: new W(30),\n      a: new W(19),\n      t: new W(15e3),\n      k: new N(1 << 16),\n      g: new N(1 << 15)\n    };\n  }();\n\n  (function () {\n    var N = H.H.m,\n        W = 1 << 15;\n\n    for (var R = 0; R < W; R++) {\n      var V = R;\n      V = (V & 2863311530) >>> 1 | (V & 1431655765) << 1;\n      V = (V & 3435973836) >>> 2 | (V & 858993459) << 2;\n      V = (V & 4042322160) >>> 4 | (V & 252645135) << 4;\n      V = (V & 4278255360) >>> 8 | (V & 16711935) << 8;\n      N.r[R] = (V >>> 16 | V << 16) >>> 17;\n    }\n\n    function n(A, l, M) {\n      while (l-- != 0) A.push(0, M);\n    }\n\n    for (var R = 0; R < 32; R++) {\n      N.q[R] = N.S[R] << 3 | N.T[R];\n      N.c[R] = N.p[R] << 4 | N.z[R];\n    }\n\n    n(N._, 144, 8);\n    n(N._, 255 - 143, 9);\n    n(N._, 279 - 255, 7);\n    n(N._, 287 - 279, 8);\n    H.H.n(N._, 9);\n    H.H.A(N._, 9, N.J);\n    H.H.l(N._, 9);\n    n(N.$, 32, 5);\n    H.H.n(N.$, 5);\n    H.H.A(N.$, 5, N.h);\n    H.H.l(N.$, 5);\n    n(N.Q, 19, 0);\n    n(N.C, 286, 0);\n    n(N.D, 30, 0);\n    n(N.v, 320, 0);\n  })();\n\n  return H.H.N;\n}();\n\nUPNG.decode._readInterlace = function (data, out) {\n  var w = out.width,\n      h = out.height;\n\n  var bpp = UPNG.decode._getBPP(out),\n      cbpp = bpp >> 3,\n      bpl = Math.ceil(w * bpp / 8);\n\n  var img = new Uint8Array(h * bpl);\n  var di = 0;\n  var starting_row = [0, 0, 4, 0, 2, 0, 1];\n  var starting_col = [0, 4, 0, 2, 0, 1, 0];\n  var row_increment = [8, 8, 8, 4, 4, 2, 2];\n  var col_increment = [8, 8, 4, 4, 2, 2, 1];\n  var pass = 0;\n\n  while (pass < 7) {\n    var ri = row_increment[pass],\n        ci = col_increment[pass];\n    var sw = 0,\n        sh = 0;\n    var cr = starting_row[pass];\n\n    while (cr < h) {\n      cr += ri;\n      sh++;\n    }\n\n    var cc = starting_col[pass];\n\n    while (cc < w) {\n      cc += ci;\n      sw++;\n    }\n\n    var bpll = Math.ceil(sw * bpp / 8);\n\n    UPNG.decode._filterZero(data, out, di, sw, sh);\n\n    var y = 0,\n        row = starting_row[pass];\n\n    while (row < h) {\n      var col = starting_col[pass];\n      var cdi = di + y * bpll << 3;\n\n      while (col < w) {\n        if (bpp == 1) {\n          var val = data[cdi >> 3];\n          val = val >> 7 - (cdi & 7) & 1;\n          img[row * bpl + (col >> 3)] |= val << 7 - ((col & 7) << 0);\n        }\n\n        if (bpp == 2) {\n          var val = data[cdi >> 3];\n          val = val >> 6 - (cdi & 7) & 3;\n          img[row * bpl + (col >> 2)] |= val << 6 - ((col & 3) << 1);\n        }\n\n        if (bpp == 4) {\n          var val = data[cdi >> 3];\n          val = val >> 4 - (cdi & 7) & 15;\n          img[row * bpl + (col >> 1)] |= val << 4 - ((col & 1) << 2);\n        }\n\n        if (bpp >= 8) {\n          var ii = row * bpl + col * cbpp;\n\n          for (var j = 0; j < cbpp; j++) img[ii + j] = data[(cdi >> 3) + j];\n        }\n\n        cdi += bpp;\n        col += ci;\n      }\n\n      y++;\n      row += ri;\n    }\n\n    if (sw * sh != 0) di += sh * (1 + bpll);\n    pass = pass + 1;\n  }\n\n  return img;\n};\n\nUPNG.decode._getBPP = function (out) {\n  var noc = [1, null, 3, 1, 2, null, 4][out.ctype];\n  return noc * out.depth;\n};\n\nUPNG.decode._filterZero = function (data, out, off, w, h) {\n  var bpp = UPNG.decode._getBPP(out),\n      bpl = Math.ceil(w * bpp / 8),\n      paeth = UPNG.decode._paeth;\n\n  bpp = Math.ceil(bpp / 8);\n  var i = 0,\n      di = 1,\n      type = data[off],\n      x = 0;\n  if (type > 1) data[off] = [0, 0, 1][type - 2];\n  if (type == 3) for (x = bpp; x < bpl; x++) data[x + 1] = data[x + 1] + (data[x + 1 - bpp] >>> 1) & 255;\n\n  for (var y = 0; y < h; y++) {\n    i = off + y * bpl;\n    di = i + y + 1;\n    type = data[di - 1];\n    x = 0;\n    if (type == 0) for (; x < bpl; x++) data[i + x] = data[di + x];else if (type == 1) {\n      for (; x < bpp; x++) data[i + x] = data[di + x];\n\n      for (; x < bpl; x++) data[i + x] = data[di + x] + data[i + x - bpp];\n    } else if (type == 2) {\n      for (; x < bpl; x++) data[i + x] = data[di + x] + data[i + x - bpl];\n    } else if (type == 3) {\n      for (; x < bpp; x++) data[i + x] = data[di + x] + (data[i + x - bpl] >>> 1);\n\n      for (; x < bpl; x++) data[i + x] = data[di + x] + (data[i + x - bpl] + data[i + x - bpp] >>> 1);\n    } else {\n      for (; x < bpp; x++) data[i + x] = data[di + x] + paeth(0, data[i + x - bpl], 0);\n\n      for (; x < bpl; x++) data[i + x] = data[di + x] + paeth(data[i + x - bpp], data[i + x - bpl], data[i + x - bpp - bpl]);\n    }\n  }\n\n  return data;\n};\n\nUPNG.decode._paeth = function (a, b, c) {\n  var p = a + b - c,\n      pa = p - a,\n      pb = p - b,\n      pc = p - c;\n  if (pa * pa <= pb * pb && pa * pa <= pc * pc) return a;else if (pb * pb <= pc * pc) return b;\n  return c;\n};\n\nUPNG.decode._IHDR = function (data, offset, out) {\n  var bin = UPNG._bin;\n  out.width = bin.readUint(data, offset);\n  offset += 4;\n  out.height = bin.readUint(data, offset);\n  offset += 4;\n  out.depth = data[offset];\n  offset++;\n  out.ctype = data[offset];\n  offset++;\n  out.compress = data[offset];\n  offset++;\n  out.filter = data[offset];\n  offset++;\n  out.interlace = data[offset];\n  offset++;\n};\n\nUPNG._bin = {\n  nextZero: function (data, p) {\n    while (data[p] != 0) p++;\n\n    return p;\n  },\n  readUshort: function (buff, p) {\n    return buff[p] << 8 | buff[p + 1];\n  },\n  writeUshort: function (buff, p, n) {\n    buff[p] = n >> 8 & 255;\n    buff[p + 1] = n & 255;\n  },\n  readUint: function (buff, p) {\n    return buff[p] * (256 * 256 * 256) + (buff[p + 1] << 16 | buff[p + 2] << 8 | buff[p + 3]);\n  },\n  writeUint: function (buff, p, n) {\n    buff[p] = n >> 24 & 255;\n    buff[p + 1] = n >> 16 & 255;\n    buff[p + 2] = n >> 8 & 255;\n    buff[p + 3] = n & 255;\n  },\n  readASCII: function (buff, p, l) {\n    var s = \"\";\n\n    for (var i = 0; i < l; i++) s += String.fromCharCode(buff[p + i]);\n\n    return s;\n  },\n  writeASCII: function (data, p, s) {\n    for (var i = 0; i < s.length; i++) data[p + i] = s.charCodeAt(i);\n  },\n  readBytes: function (buff, p, l) {\n    var arr = [];\n\n    for (var i = 0; i < l; i++) arr.push(buff[p + i]);\n\n    return arr;\n  },\n  pad: function (n) {\n    return n.length < 2 ? \"0\" + n : n;\n  },\n  readUTF8: function (buff, p, l) {\n    var s = \"\",\n        ns;\n\n    for (var i = 0; i < l; i++) s += \"%\" + UPNG._bin.pad(buff[p + i].toString(16));\n\n    try {\n      ns = decodeURIComponent(s);\n    } catch (e) {\n      return UPNG._bin.readASCII(buff, p, l);\n    }\n\n    return ns;\n  }\n};\n\nUPNG._copyTile = function (sb, sw, sh, tb, tw, th, xoff, yoff, mode) {\n  var w = Math.min(sw, tw),\n      h = Math.min(sh, th);\n  var si = 0,\n      ti = 0;\n\n  for (var y = 0; y < h; y++) for (var x = 0; x < w; x++) {\n    if (xoff >= 0 && yoff >= 0) {\n      si = y * sw + x << 2;\n      ti = (yoff + y) * tw + xoff + x << 2;\n    } else {\n      si = (-yoff + y) * sw - xoff + x << 2;\n      ti = y * tw + x << 2;\n    }\n\n    if (mode == 0) {\n      tb[ti] = sb[si];\n      tb[ti + 1] = sb[si + 1];\n      tb[ti + 2] = sb[si + 2];\n      tb[ti + 3] = sb[si + 3];\n    } else if (mode == 1) {\n      var fa = sb[si + 3] * (1 / 255),\n          fr = sb[si] * fa,\n          fg = sb[si + 1] * fa,\n          fb = sb[si + 2] * fa;\n      var ba = tb[ti + 3] * (1 / 255),\n          br = tb[ti] * ba,\n          bg = tb[ti + 1] * ba,\n          bb = tb[ti + 2] * ba;\n      var ifa = 1 - fa,\n          oa = fa + ba * ifa,\n          ioa = oa == 0 ? 0 : 1 / oa;\n      tb[ti + 3] = 255 * oa;\n      tb[ti + 0] = (fr + br * ifa) * ioa;\n      tb[ti + 1] = (fg + bg * ifa) * ioa;\n      tb[ti + 2] = (fb + bb * ifa) * ioa;\n    } else if (mode == 2) {\n      // copy only differences, otherwise zero\n      var fa = sb[si + 3],\n          fr = sb[si],\n          fg = sb[si + 1],\n          fb = sb[si + 2];\n      var ba = tb[ti + 3],\n          br = tb[ti],\n          bg = tb[ti + 1],\n          bb = tb[ti + 2];\n\n      if (fa == ba && fr == br && fg == bg && fb == bb) {\n        tb[ti] = 0;\n        tb[ti + 1] = 0;\n        tb[ti + 2] = 0;\n        tb[ti + 3] = 0;\n      } else {\n        tb[ti] = fr;\n        tb[ti + 1] = fg;\n        tb[ti + 2] = fb;\n        tb[ti + 3] = fa;\n      }\n    } else if (mode == 3) {\n      // check if can be blended\n      var fa = sb[si + 3],\n          fr = sb[si],\n          fg = sb[si + 1],\n          fb = sb[si + 2];\n      var ba = tb[ti + 3],\n          br = tb[ti],\n          bg = tb[ti + 1],\n          bb = tb[ti + 2];\n      if (fa == ba && fr == br && fg == bg && fb == bb) continue; //if(fa!=255 && ba!=0) return false;\n\n      if (fa < 220 && ba > 20) return false;\n    }\n  }\n\n  return true;\n};\n\nUPNG.encode = function (bufs, w, h, ps, dels, tabs, forbidPlte) {\n  if (ps == null) ps = 0;\n  if (forbidPlte == null) forbidPlte = false;\n  var nimg = UPNG.encode.compress(bufs, w, h, ps, [false, false, false, 0, forbidPlte]);\n  UPNG.encode.compressPNG(nimg, -1);\n  return UPNG.encode._main(nimg, w, h, dels, tabs);\n};\n\nUPNG.encodeLL = function (bufs, w, h, cc, ac, depth, dels, tabs) {\n  var nimg = {\n    ctype: 0 + (cc == 1 ? 0 : 2) + (ac == 0 ? 0 : 4),\n    depth: depth,\n    frames: []\n  };\n  var time = Date.now();\n  var bipp = (cc + ac) * depth,\n      bipl = bipp * w;\n\n  for (var i = 0; i < bufs.length; i++) nimg.frames.push({\n    rect: {\n      x: 0,\n      y: 0,\n      width: w,\n      height: h\n    },\n    img: new Uint8Array(bufs[i]),\n    blend: 0,\n    dispose: 1,\n    bpp: Math.ceil(bipp / 8),\n    bpl: Math.ceil(bipl / 8)\n  });\n\n  UPNG.encode.compressPNG(nimg, 0, true);\n\n  var out = UPNG.encode._main(nimg, w, h, dels, tabs);\n\n  return out;\n};\n\nUPNG.encode._main = function (nimg, w, h, dels, tabs) {\n  if (tabs == null) tabs = {};\n  var crc = UPNG.crc.crc,\n      wUi = UPNG._bin.writeUint,\n      wUs = UPNG._bin.writeUshort,\n      wAs = UPNG._bin.writeASCII;\n  var offset = 8,\n      anim = nimg.frames.length > 1,\n      pltAlpha = false;\n  var leng = 8 + (16 + 5 + 4)\n  /*+ (9+4)*/\n  + (anim ? 20 : 0);\n  if (tabs[\"sRGB\"] != null) leng += 8 + 1 + 4;\n  if (tabs[\"pHYs\"] != null) leng += 8 + 9 + 4;\n\n  if (nimg.ctype == 3) {\n    var dl = nimg.plte.length;\n\n    for (var i = 0; i < dl; i++) if (nimg.plte[i] >>> 24 != 255) pltAlpha = true;\n\n    leng += 8 + dl * 3 + 4 + (pltAlpha ? 8 + dl * 1 + 4 : 0);\n  }\n\n  for (var j = 0; j < nimg.frames.length; j++) {\n    var fr = nimg.frames[j];\n    if (anim) leng += 38;\n    leng += fr.cimg.length + 12;\n    if (j != 0) leng += 4;\n  }\n\n  leng += 12;\n  var data = new Uint8Array(leng);\n  var wr = [0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a];\n\n  for (var i = 0; i < 8; i++) data[i] = wr[i];\n\n  wUi(data, offset, 13);\n  offset += 4;\n  wAs(data, offset, \"IHDR\");\n  offset += 4;\n  wUi(data, offset, w);\n  offset += 4;\n  wUi(data, offset, h);\n  offset += 4;\n  data[offset] = nimg.depth;\n  offset++; // depth\n\n  data[offset] = nimg.ctype;\n  offset++; // ctype\n\n  data[offset] = 0;\n  offset++; // compress\n\n  data[offset] = 0;\n  offset++; // filter\n\n  data[offset] = 0;\n  offset++; // interlace\n\n  wUi(data, offset, crc(data, offset - 17, 17));\n  offset += 4; // crc\n  // 13 bytes to say, that it is sRGB\n\n  if (tabs[\"sRGB\"] != null) {\n    wUi(data, offset, 1);\n    offset += 4;\n    wAs(data, offset, \"sRGB\");\n    offset += 4;\n    data[offset] = tabs[\"sRGB\"];\n    offset++;\n    wUi(data, offset, crc(data, offset - 5, 5));\n    offset += 4; // crc\n  }\n\n  if (tabs[\"pHYs\"] != null) {\n    wUi(data, offset, 9);\n    offset += 4;\n    wAs(data, offset, \"pHYs\");\n    offset += 4;\n    wUi(data, offset, tabs[\"pHYs\"][0]);\n    offset += 4;\n    wUi(data, offset, tabs[\"pHYs\"][1]);\n    offset += 4;\n    data[offset] = tabs[\"pHYs\"][2];\n    offset++;\n    wUi(data, offset, crc(data, offset - 13, 13));\n    offset += 4; // crc\n  }\n\n  if (anim) {\n    wUi(data, offset, 8);\n    offset += 4;\n    wAs(data, offset, \"acTL\");\n    offset += 4;\n    wUi(data, offset, nimg.frames.length);\n    offset += 4;\n    wUi(data, offset, tabs[\"loop\"] != null ? tabs[\"loop\"] : 0);\n    offset += 4;\n    wUi(data, offset, crc(data, offset - 12, 12));\n    offset += 4; // crc\n  }\n\n  if (nimg.ctype == 3) {\n    var dl = nimg.plte.length;\n    wUi(data, offset, dl * 3);\n    offset += 4;\n    wAs(data, offset, \"PLTE\");\n    offset += 4;\n\n    for (var i = 0; i < dl; i++) {\n      var ti = i * 3,\n          c = nimg.plte[i],\n          r = c & 255,\n          g = c >>> 8 & 255,\n          b = c >>> 16 & 255;\n      data[offset + ti + 0] = r;\n      data[offset + ti + 1] = g;\n      data[offset + ti + 2] = b;\n    }\n\n    offset += dl * 3;\n    wUi(data, offset, crc(data, offset - dl * 3 - 4, dl * 3 + 4));\n    offset += 4; // crc\n\n    if (pltAlpha) {\n      wUi(data, offset, dl);\n      offset += 4;\n      wAs(data, offset, \"tRNS\");\n      offset += 4;\n\n      for (var i = 0; i < dl; i++) data[offset + i] = nimg.plte[i] >>> 24 & 255;\n\n      offset += dl;\n      wUi(data, offset, crc(data, offset - dl - 4, dl + 4));\n      offset += 4; // crc\n    }\n  }\n\n  var fi = 0;\n\n  for (var j = 0; j < nimg.frames.length; j++) {\n    var fr = nimg.frames[j];\n\n    if (anim) {\n      wUi(data, offset, 26);\n      offset += 4;\n      wAs(data, offset, \"fcTL\");\n      offset += 4;\n      wUi(data, offset, fi++);\n      offset += 4;\n      wUi(data, offset, fr.rect.width);\n      offset += 4;\n      wUi(data, offset, fr.rect.height);\n      offset += 4;\n      wUi(data, offset, fr.rect.x);\n      offset += 4;\n      wUi(data, offset, fr.rect.y);\n      offset += 4;\n      wUs(data, offset, dels[j]);\n      offset += 2;\n      wUs(data, offset, 1000);\n      offset += 2;\n      data[offset] = fr.dispose;\n      offset++; // dispose\n\n      data[offset] = fr.blend;\n      offset++; // blend\n\n      wUi(data, offset, crc(data, offset - 30, 30));\n      offset += 4; // crc\n    }\n\n    var imgd = fr.cimg,\n        dl = imgd.length;\n    wUi(data, offset, dl + (j == 0 ? 0 : 4));\n    offset += 4;\n    var ioff = offset;\n    wAs(data, offset, j == 0 ? \"IDAT\" : \"fdAT\");\n    offset += 4;\n\n    if (j != 0) {\n      wUi(data, offset, fi++);\n      offset += 4;\n    }\n\n    data.set(imgd, offset);\n    offset += dl;\n    wUi(data, offset, crc(data, ioff, offset - ioff));\n    offset += 4; // crc\n  }\n\n  wUi(data, offset, 0);\n  offset += 4;\n  wAs(data, offset, \"IEND\");\n  offset += 4;\n  wUi(data, offset, crc(data, offset - 4, 4));\n  offset += 4; // crc\n\n  return data.buffer;\n};\n\nUPNG.encode.compressPNG = function (out, filter, levelZero) {\n  for (var i = 0; i < out.frames.length; i++) {\n    var frm = out.frames[i],\n        nw = frm.rect.width,\n        nh = frm.rect.height;\n    var fdata = new Uint8Array(nh * frm.bpl + nh);\n    frm.cimg = UPNG.encode._filterZero(frm.img, nh, frm.bpp, frm.bpl, fdata, filter, levelZero);\n  }\n};\n\nUPNG.encode.compress = function (bufs, w, h, ps, prms) // prms:  onlyBlend, minBits, forbidPlte\n{\n  //var time = Date.now();\n  var onlyBlend = prms[0],\n      evenCrd = prms[1],\n      forbidPrev = prms[2],\n      minBits = prms[3],\n      forbidPlte = prms[4];\n  var ctype = 6,\n      depth = 8,\n      alphaAnd = 255;\n\n  for (var j = 0; j < bufs.length; j++) {\n    // when not quantized, other frames can contain colors, that are not in an initial frame\n    var img = new Uint8Array(bufs[j]),\n        ilen = img.length;\n\n    for (var i = 0; i < ilen; i += 4) alphaAnd &= img[i + 3];\n  }\n\n  var gotAlpha = alphaAnd != 255; //console.log(\"alpha check\", Date.now()-time);  time = Date.now();\n  //var brute = gotAlpha && forGIF;\t\t// brute : frames can only be copied, not \"blended\"\n\n  var frms = UPNG.encode.framize(bufs, w, h, onlyBlend, evenCrd, forbidPrev); //console.log(\"framize\", Date.now()-time);  time = Date.now();\n\n  var cmap = {},\n      plte = [],\n      inds = [];\n\n  if (ps != 0) {\n    var nbufs = [];\n\n    for (var i = 0; i < frms.length; i++) nbufs.push(frms[i].img.buffer);\n\n    var abuf = UPNG.encode.concatRGBA(nbufs),\n        qres = UPNG.quantize(abuf, ps);\n    var cof = 0,\n        bb = new Uint8Array(qres.abuf);\n\n    for (var i = 0; i < frms.length; i++) {\n      var ti = frms[i].img,\n          bln = ti.length;\n      inds.push(new Uint8Array(qres.inds.buffer, cof >> 2, bln >> 2));\n\n      for (var j = 0; j < bln; j += 4) {\n        ti[j] = bb[cof + j];\n        ti[j + 1] = bb[cof + j + 1];\n        ti[j + 2] = bb[cof + j + 2];\n        ti[j + 3] = bb[cof + j + 3];\n      }\n\n      cof += bln;\n    }\n\n    for (var i = 0; i < qres.plte.length; i++) plte.push(qres.plte[i].est.rgba); //console.log(\"quantize\", Date.now()-time);  time = Date.now();\n\n  } else {\n    // what if ps==0, but there are <=256 colors?  we still need to detect, if the palette could be used\n    for (var j = 0; j < frms.length; j++) {\n      // when not quantized, other frames can contain colors, that are not in an initial frame\n      var frm = frms[j],\n          img32 = new Uint32Array(frm.img.buffer),\n          nw = frm.rect.width,\n          ilen = img32.length;\n      var ind = new Uint8Array(ilen);\n      inds.push(ind);\n\n      for (var i = 0; i < ilen; i++) {\n        var c = img32[i];\n        if (i != 0 && c == img32[i - 1]) ind[i] = ind[i - 1];else if (i > nw && c == img32[i - nw]) ind[i] = ind[i - nw];else {\n          var cmc = cmap[c];\n\n          if (cmc == null) {\n            cmap[c] = cmc = plte.length;\n            plte.push(c);\n            if (plte.length >= 300) break;\n          }\n\n          ind[i] = cmc;\n        }\n      }\n    } //console.log(\"make palette\", Date.now()-time);  time = Date.now();\n\n  }\n\n  var cc = plte.length; //console.log(\"colors:\",cc);\n\n  if (cc <= 256 && forbidPlte == false) {\n    if (cc <= 2) depth = 1;else if (cc <= 4) depth = 2;else if (cc <= 16) depth = 4;else depth = 8;\n    depth = Math.max(depth, minBits);\n  }\n\n  for (var j = 0; j < frms.length; j++) {\n    var frm = frms[j],\n        nx = frm.rect.x,\n        ny = frm.rect.y,\n        nw = frm.rect.width,\n        nh = frm.rect.height;\n    var cimg = frm.img,\n        cimg32 = new Uint32Array(cimg.buffer);\n    var bpl = 4 * nw,\n        bpp = 4;\n\n    if (cc <= 256 && forbidPlte == false) {\n      bpl = Math.ceil(depth * nw / 8);\n      var nimg = new Uint8Array(bpl * nh);\n      var inj = inds[j];\n\n      for (var y = 0; y < nh; y++) {\n        var i = y * bpl,\n            ii = y * nw;\n        if (depth == 8) for (var x = 0; x < nw; x++) nimg[i + x] = inj[ii + x];else if (depth == 4) for (var x = 0; x < nw; x++) nimg[i + (x >> 1)] |= inj[ii + x] << 4 - (x & 1) * 4;else if (depth == 2) for (var x = 0; x < nw; x++) nimg[i + (x >> 2)] |= inj[ii + x] << 6 - (x & 3) * 2;else if (depth == 1) for (var x = 0; x < nw; x++) nimg[i + (x >> 3)] |= inj[ii + x] << 7 - (x & 7) * 1;\n      }\n\n      cimg = nimg;\n      ctype = 3;\n      bpp = 1;\n    } else if (gotAlpha == false && frms.length == 1) {\n      // some next \"reduced\" frames may contain alpha for blending\n      var nimg = new Uint8Array(nw * nh * 3),\n          area = nw * nh;\n\n      for (var i = 0; i < area; i++) {\n        var ti = i * 3,\n            qi = i * 4;\n        nimg[ti] = cimg[qi];\n        nimg[ti + 1] = cimg[qi + 1];\n        nimg[ti + 2] = cimg[qi + 2];\n      }\n\n      cimg = nimg;\n      ctype = 2;\n      bpp = 3;\n      bpl = 3 * nw;\n    }\n\n    frm.img = cimg;\n    frm.bpl = bpl;\n    frm.bpp = bpp;\n  } //console.log(\"colors => palette indices\", Date.now()-time);  time = Date.now();\n\n\n  return {\n    ctype: ctype,\n    depth: depth,\n    plte: plte,\n    frames: frms\n  };\n};\n\nUPNG.encode.framize = function (bufs, w, h, alwaysBlend, evenCrd, forbidPrev) {\n  /*  DISPOSE\n      - 0 : no change\n  \t- 1 : clear to transparent\n  \t- 2 : retstore to content before rendering (previous frame disposed)\n  \tBLEND\n  \t- 0 : replace\n  \t- 1 : blend\n  */\n  var frms = [];\n\n  for (var j = 0; j < bufs.length; j++) {\n    var cimg = new Uint8Array(bufs[j]),\n        cimg32 = new Uint32Array(cimg.buffer);\n    var nimg;\n    var nx = 0,\n        ny = 0,\n        nw = w,\n        nh = h,\n        blend = alwaysBlend ? 1 : 0;\n\n    if (j != 0) {\n      var tlim = forbidPrev || alwaysBlend || j == 1 || frms[j - 2].dispose != 0 ? 1 : 2,\n          tstp = 0,\n          tarea = 1e9;\n\n      for (var it = 0; it < tlim; it++) {\n        var pimg = new Uint8Array(bufs[j - 1 - it]),\n            p32 = new Uint32Array(bufs[j - 1 - it]);\n        var mix = w,\n            miy = h,\n            max = -1,\n            may = -1;\n\n        for (var y = 0; y < h; y++) for (var x = 0; x < w; x++) {\n          var i = y * w + x;\n\n          if (cimg32[i] != p32[i]) {\n            if (x < mix) mix = x;\n            if (x > max) max = x;\n            if (y < miy) miy = y;\n            if (y > may) may = y;\n          }\n        }\n\n        if (max == -1) mix = miy = max = may = 0;\n\n        if (evenCrd) {\n          if ((mix & 1) == 1) mix--;\n          if ((miy & 1) == 1) miy--;\n        }\n\n        var sarea = (max - mix + 1) * (may - miy + 1);\n\n        if (sarea < tarea) {\n          tarea = sarea;\n          tstp = it;\n          nx = mix;\n          ny = miy;\n          nw = max - mix + 1;\n          nh = may - miy + 1;\n        }\n      } // alwaysBlend: pokud zjistím, že blendit nelze, nastavím předchozímu snímku dispose=1. Zajistím, aby obsahoval můj obdélník.\n\n\n      var pimg = new Uint8Array(bufs[j - 1 - tstp]);\n      if (tstp == 1) frms[j - 1].dispose = 2;\n      nimg = new Uint8Array(nw * nh * 4);\n\n      UPNG._copyTile(pimg, w, h, nimg, nw, nh, -nx, -ny, 0);\n\n      blend = UPNG._copyTile(cimg, w, h, nimg, nw, nh, -nx, -ny, 3) ? 1 : 0;\n      if (blend == 1) UPNG.encode._prepareDiff(cimg, w, h, nimg, {\n        x: nx,\n        y: ny,\n        width: nw,\n        height: nh\n      });else UPNG._copyTile(cimg, w, h, nimg, nw, nh, -nx, -ny, 0); //UPNG._copyTile(cimg,w,h, nimg,nw,nh, -nx,-ny, blend==1?2:0);\n    } else nimg = cimg.slice(0); // img may be rewritten further ... don't rewrite input\n\n\n    frms.push({\n      rect: {\n        x: nx,\n        y: ny,\n        width: nw,\n        height: nh\n      },\n      img: nimg,\n      blend: blend,\n      dispose: 0\n    });\n  }\n\n  if (alwaysBlend) for (var j = 0; j < frms.length; j++) {\n    var frm = frms[j];\n    if (frm.blend == 1) continue;\n    var r0 = frm.rect,\n        r1 = frms[j - 1].rect;\n    var miX = Math.min(r0.x, r1.x),\n        miY = Math.min(r0.y, r1.y);\n    var maX = Math.max(r0.x + r0.width, r1.x + r1.width),\n        maY = Math.max(r0.y + r0.height, r1.y + r1.height);\n    var r = {\n      x: miX,\n      y: miY,\n      width: maX - miX,\n      height: maY - miY\n    };\n    frms[j - 1].dispose = 1;\n    if (j - 1 != 0) UPNG.encode._updateFrame(bufs, w, h, frms, j - 1, r, evenCrd);\n\n    UPNG.encode._updateFrame(bufs, w, h, frms, j, r, evenCrd);\n  }\n  var area = 0;\n  if (bufs.length != 1) for (var i = 0; i < frms.length; i++) {\n    var frm = frms[i];\n    area += frm.rect.width * frm.rect.height; //if(i==0 || frm.blend!=1) continue;\n    //var ob = new Uint8Array(\n    //console.log(frm.blend, frm.dispose, frm.rect);\n  } //if(area!=0) console.log(area);\n\n  return frms;\n};\n\nUPNG.encode._updateFrame = function (bufs, w, h, frms, i, r, evenCrd) {\n  var U8 = Uint8Array,\n      U32 = Uint32Array;\n  var pimg = new U8(bufs[i - 1]),\n      pimg32 = new U32(bufs[i - 1]),\n      nimg = i + 1 < bufs.length ? new U8(bufs[i + 1]) : null;\n  var cimg = new U8(bufs[i]),\n      cimg32 = new U32(cimg.buffer);\n  var mix = w,\n      miy = h,\n      max = -1,\n      may = -1;\n\n  for (var y = 0; y < r.height; y++) for (var x = 0; x < r.width; x++) {\n    var cx = r.x + x,\n        cy = r.y + y;\n    var j = cy * w + cx,\n        cc = cimg32[j]; // no need to draw transparency, or to dispose it. Or, if writing the same color and the next one does not need transparency.\n\n    if (cc == 0 || frms[i - 1].dispose == 0 && pimg32[j] == cc && (nimg == null || nimg[j * 4 + 3] != 0)\n    /**/\n    ) {} else {\n      if (cx < mix) mix = cx;\n      if (cx > max) max = cx;\n      if (cy < miy) miy = cy;\n      if (cy > may) may = cy;\n    }\n  }\n\n  if (max == -1) mix = miy = max = may = 0;\n\n  if (evenCrd) {\n    if ((mix & 1) == 1) mix--;\n    if ((miy & 1) == 1) miy--;\n  }\n\n  r = {\n    x: mix,\n    y: miy,\n    width: max - mix + 1,\n    height: may - miy + 1\n  };\n  var fr = frms[i];\n  fr.rect = r;\n  fr.blend = 1;\n  fr.img = new Uint8Array(r.width * r.height * 4);\n\n  if (frms[i - 1].dispose == 0) {\n    UPNG._copyTile(pimg, w, h, fr.img, r.width, r.height, -r.x, -r.y, 0);\n\n    UPNG.encode._prepareDiff(cimg, w, h, fr.img, r); //UPNG._copyTile(cimg,w,h, fr.img,r.width,r.height, -r.x,-r.y, 2);\n\n  } else UPNG._copyTile(cimg, w, h, fr.img, r.width, r.height, -r.x, -r.y, 0);\n};\n\nUPNG.encode._prepareDiff = function (cimg, w, h, nimg, rec) {\n  UPNG._copyTile(cimg, w, h, nimg, rec.width, rec.height, -rec.x, -rec.y, 2);\n  /*\n  var n32 = new Uint32Array(nimg.buffer);\n  var og = new Uint8Array(rec.width*rec.height*4), o32 = new Uint32Array(og.buffer);\n  UPNG._copyTile(cimg,w,h, og,rec.width,rec.height, -rec.x,-rec.y, 0);\n  for(var i=4; i<nimg.length; i+=4) {\n  \tif(nimg[i-1]!=0 && nimg[i+3]==0 && o32[i>>>2]==o32[(i>>>2)-1]) {\n  \t\tn32[i>>>2]=o32[i>>>2];\n  \t\t//var j = i, c=p32[(i>>>2)-1];\n  \t\t//while(p32[j>>>2]==c) {  n32[j>>>2]=c;  j+=4;  }\n  \t}\n  }\n  for(var i=nimg.length-8; i>0; i-=4) {\n  \tif(nimg[i+7]!=0 && nimg[i+3]==0 && o32[i>>>2]==o32[(i>>>2)+1]) {\n  \t\tn32[i>>>2]=o32[i>>>2];\n  \t\t//var j = i, c=p32[(i>>>2)-1];\n  \t\t//while(p32[j>>>2]==c) {  n32[j>>>2]=c;  j+=4;  }\n  \t}\n  }*/\n\n};\n\nUPNG.encode._filterZero = function (img, h, bpp, bpl, data, filter, levelZero) {\n  var fls = [],\n      ftry = [0, 1, 2, 3, 4];\n  if (filter != -1) ftry = [filter];else if (h * bpl > 500000 || bpp == 1) ftry = [0];\n  var opts;\n  if (levelZero) opts = {\n    level: 0\n  };\n  var CMPR = levelZero && UZIP != null ? UZIP : _pako.default;\n\n  for (var i = 0; i < ftry.length; i++) {\n    for (var y = 0; y < h; y++) UPNG.encode._filterLine(data, img, y, bpl, bpp, ftry[i]); //var nimg = new Uint8Array(data.length);\n    //var sz = UZIP.F.deflate(data, nimg);  fls.push(nimg.slice(0,sz));\n    //var dfl = pako[\"deflate\"](data), dl=dfl.length-4;\n    //var crc = (dfl[dl+3]<<24)|(dfl[dl+2]<<16)|(dfl[dl+1]<<8)|(dfl[dl+0]<<0);\n    //console.log(crc, UZIP.adler(data,2,data.length-6));\n\n\n    fls.push(CMPR[\"deflate\"](data, opts));\n  }\n\n  var ti,\n      tsize = 1e9;\n\n  for (var i = 0; i < fls.length; i++) if (fls[i].length < tsize) {\n    ti = i;\n    tsize = fls[i].length;\n  }\n\n  return fls[ti];\n};\n\nUPNG.encode._filterLine = function (data, img, y, bpl, bpp, type) {\n  var i = y * bpl,\n      di = i + y,\n      paeth = UPNG.decode._paeth;\n  data[di] = type;\n  di++;\n\n  if (type == 0) {\n    if (bpl < 500) for (var x = 0; x < bpl; x++) data[di + x] = img[i + x];else data.set(new Uint8Array(img.buffer, i, bpl), di);\n  } else if (type == 1) {\n    for (var x = 0; x < bpp; x++) data[di + x] = img[i + x];\n\n    for (var x = bpp; x < bpl; x++) data[di + x] = img[i + x] - img[i + x - bpp] + 256 & 255;\n  } else if (y == 0) {\n    for (var x = 0; x < bpp; x++) data[di + x] = img[i + x];\n\n    if (type == 2) for (var x = bpp; x < bpl; x++) data[di + x] = img[i + x];\n    if (type == 3) for (var x = bpp; x < bpl; x++) data[di + x] = img[i + x] - (img[i + x - bpp] >> 1) + 256 & 255;\n    if (type == 4) for (var x = bpp; x < bpl; x++) data[di + x] = img[i + x] - paeth(img[i + x - bpp], 0, 0) + 256 & 255;\n  } else {\n    if (type == 2) {\n      for (var x = 0; x < bpl; x++) data[di + x] = img[i + x] + 256 - img[i + x - bpl] & 255;\n    }\n\n    if (type == 3) {\n      for (var x = 0; x < bpp; x++) data[di + x] = img[i + x] + 256 - (img[i + x - bpl] >> 1) & 255;\n\n      for (var x = bpp; x < bpl; x++) data[di + x] = img[i + x] + 256 - (img[i + x - bpl] + img[i + x - bpp] >> 1) & 255;\n    }\n\n    if (type == 4) {\n      for (var x = 0; x < bpp; x++) data[di + x] = img[i + x] + 256 - paeth(0, img[i + x - bpl], 0) & 255;\n\n      for (var x = bpp; x < bpl; x++) data[di + x] = img[i + x] + 256 - paeth(img[i + x - bpp], img[i + x - bpl], img[i + x - bpp - bpl]) & 255;\n    }\n  }\n};\n\nUPNG.crc = {\n  table: function () {\n    var tab = new Uint32Array(256);\n\n    for (var n = 0; n < 256; n++) {\n      var c = n;\n\n      for (var k = 0; k < 8; k++) {\n        if (c & 1) c = 0xedb88320 ^ c >>> 1;else c = c >>> 1;\n      }\n\n      tab[n] = c;\n    }\n\n    return tab;\n  }(),\n  update: function (c, buf, off, len) {\n    for (var i = 0; i < len; i++) c = UPNG.crc.table[(c ^ buf[off + i]) & 0xff] ^ c >>> 8;\n\n    return c;\n  },\n  crc: function (b, o, l) {\n    return UPNG.crc.update(0xffffffff, b, o, l) ^ 0xffffffff;\n  }\n};\n\nUPNG.quantize = function (abuf, ps) {\n  var oimg = new Uint8Array(abuf),\n      nimg = oimg.slice(0),\n      nimg32 = new Uint32Array(nimg.buffer);\n  var KD = UPNG.quantize.getKDtree(nimg, ps);\n  var root = KD[0],\n      leafs = KD[1];\n  var planeDst = UPNG.quantize.planeDst;\n  var sb = oimg,\n      tb = nimg32,\n      len = sb.length;\n  var inds = new Uint8Array(oimg.length >> 2);\n\n  for (var i = 0; i < len; i += 4) {\n    var r = sb[i] * (1 / 255),\n        g = sb[i + 1] * (1 / 255),\n        b = sb[i + 2] * (1 / 255),\n        a = sb[i + 3] * (1 / 255); //  exact, but too slow :(\n\n    var nd = UPNG.quantize.getNearest(root, r, g, b, a); //var nd = root;\n    //while(nd.left) nd = (planeDst(nd.est,r,g,b,a)<=0) ? nd.left : nd.right;\n\n    inds[i >> 2] = nd.ind;\n    tb[i >> 2] = nd.est.rgba;\n  }\n\n  return {\n    abuf: nimg.buffer,\n    inds: inds,\n    plte: leafs\n  };\n};\n\nUPNG.quantize.getKDtree = function (nimg, ps, err) {\n  if (err == null) err = 0.0001;\n  var nimg32 = new Uint32Array(nimg.buffer);\n  var root = {\n    i0: 0,\n    i1: nimg.length,\n    bst: null,\n    est: null,\n    tdst: 0,\n    left: null,\n    right: null\n  }; // basic statistic, extra statistic\n\n  root.bst = UPNG.quantize.stats(nimg, root.i0, root.i1);\n  root.est = UPNG.quantize.estats(root.bst);\n  var leafs = [root];\n\n  while (leafs.length < ps) {\n    var maxL = 0,\n        mi = 0;\n\n    for (var i = 0; i < leafs.length; i++) if (leafs[i].est.L > maxL) {\n      maxL = leafs[i].est.L;\n      mi = i;\n    }\n\n    if (maxL < err) break;\n    var node = leafs[mi];\n    var s0 = UPNG.quantize.splitPixels(nimg, nimg32, node.i0, node.i1, node.est.e, node.est.eMq255);\n    var s0wrong = node.i0 >= s0 || node.i1 <= s0; //console.log(maxL, leafs.length, mi);\n\n    if (s0wrong) {\n      node.est.L = 0;\n      continue;\n    }\n\n    var ln = {\n      i0: node.i0,\n      i1: s0,\n      bst: null,\n      est: null,\n      tdst: 0,\n      left: null,\n      right: null\n    };\n    ln.bst = UPNG.quantize.stats(nimg, ln.i0, ln.i1);\n    ln.est = UPNG.quantize.estats(ln.bst);\n    var rn = {\n      i0: s0,\n      i1: node.i1,\n      bst: null,\n      est: null,\n      tdst: 0,\n      left: null,\n      right: null\n    };\n    rn.bst = {\n      R: [],\n      m: [],\n      N: node.bst.N - ln.bst.N\n    };\n\n    for (var i = 0; i < 16; i++) rn.bst.R[i] = node.bst.R[i] - ln.bst.R[i];\n\n    for (var i = 0; i < 4; i++) rn.bst.m[i] = node.bst.m[i] - ln.bst.m[i];\n\n    rn.est = UPNG.quantize.estats(rn.bst);\n    node.left = ln;\n    node.right = rn;\n    leafs[mi] = ln;\n    leafs.push(rn);\n  }\n\n  leafs.sort(function (a, b) {\n    return b.bst.N - a.bst.N;\n  });\n\n  for (var i = 0; i < leafs.length; i++) leafs[i].ind = i;\n\n  return [root, leafs];\n};\n\nUPNG.quantize.getNearest = function (nd, r, g, b, a) {\n  if (nd.left == null) {\n    nd.tdst = UPNG.quantize.dist(nd.est.q, r, g, b, a);\n    return nd;\n  }\n\n  var planeDst = UPNG.quantize.planeDst(nd.est, r, g, b, a);\n  var node0 = nd.left,\n      node1 = nd.right;\n\n  if (planeDst > 0) {\n    node0 = nd.right;\n    node1 = nd.left;\n  }\n\n  var ln = UPNG.quantize.getNearest(node0, r, g, b, a);\n  if (ln.tdst <= planeDst * planeDst) return ln;\n  var rn = UPNG.quantize.getNearest(node1, r, g, b, a);\n  return rn.tdst < ln.tdst ? rn : ln;\n};\n\nUPNG.quantize.planeDst = function (est, r, g, b, a) {\n  var e = est.e;\n  return e[0] * r + e[1] * g + e[2] * b + e[3] * a - est.eMq;\n};\n\nUPNG.quantize.dist = function (q, r, g, b, a) {\n  var d0 = r - q[0],\n      d1 = g - q[1],\n      d2 = b - q[2],\n      d3 = a - q[3];\n  return d0 * d0 + d1 * d1 + d2 * d2 + d3 * d3;\n};\n\nUPNG.quantize.splitPixels = function (nimg, nimg32, i0, i1, e, eMq) {\n  var vecDot = UPNG.quantize.vecDot;\n  i1 -= 4;\n  var shfs = 0;\n\n  while (i0 < i1) {\n    while (vecDot(nimg, i0, e) <= eMq) i0 += 4;\n\n    while (vecDot(nimg, i1, e) > eMq) i1 -= 4;\n\n    if (i0 >= i1) break;\n    var t = nimg32[i0 >> 2];\n    nimg32[i0 >> 2] = nimg32[i1 >> 2];\n    nimg32[i1 >> 2] = t;\n    i0 += 4;\n    i1 -= 4;\n  }\n\n  while (vecDot(nimg, i0, e) > eMq) i0 -= 4;\n\n  return i0 + 4;\n};\n\nUPNG.quantize.vecDot = function (nimg, i, e) {\n  return nimg[i] * e[0] + nimg[i + 1] * e[1] + nimg[i + 2] * e[2] + nimg[i + 3] * e[3];\n};\n\nUPNG.quantize.stats = function (nimg, i0, i1) {\n  var R = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n  var m = [0, 0, 0, 0];\n  var N = i1 - i0 >> 2;\n\n  for (var i = i0; i < i1; i += 4) {\n    var r = nimg[i] * (1 / 255),\n        g = nimg[i + 1] * (1 / 255),\n        b = nimg[i + 2] * (1 / 255),\n        a = nimg[i + 3] * (1 / 255); //var r = nimg[i], g = nimg[i+1], b = nimg[i+2], a = nimg[i+3];\n\n    m[0] += r;\n    m[1] += g;\n    m[2] += b;\n    m[3] += a;\n    R[0] += r * r;\n    R[1] += r * g;\n    R[2] += r * b;\n    R[3] += r * a;\n    R[5] += g * g;\n    R[6] += g * b;\n    R[7] += g * a;\n    R[10] += b * b;\n    R[11] += b * a;\n    R[15] += a * a;\n  }\n\n  R[4] = R[1];\n  R[8] = R[2];\n  R[9] = R[6];\n  R[12] = R[3];\n  R[13] = R[7];\n  R[14] = R[11];\n  return {\n    R: R,\n    m: m,\n    N: N\n  };\n};\n\nUPNG.quantize.estats = function (stats) {\n  var R = stats.R,\n      m = stats.m,\n      N = stats.N; // when all samples are equal, but N is large (millions), the Rj can be non-zero ( 0.0003.... - precission error)\n\n  var m0 = m[0],\n      m1 = m[1],\n      m2 = m[2],\n      m3 = m[3],\n      iN = N == 0 ? 0 : 1 / N;\n  var Rj = [R[0] - m0 * m0 * iN, R[1] - m0 * m1 * iN, R[2] - m0 * m2 * iN, R[3] - m0 * m3 * iN, R[4] - m1 * m0 * iN, R[5] - m1 * m1 * iN, R[6] - m1 * m2 * iN, R[7] - m1 * m3 * iN, R[8] - m2 * m0 * iN, R[9] - m2 * m1 * iN, R[10] - m2 * m2 * iN, R[11] - m2 * m3 * iN, R[12] - m3 * m0 * iN, R[13] - m3 * m1 * iN, R[14] - m3 * m2 * iN, R[15] - m3 * m3 * iN];\n  var A = Rj,\n      M = UPNG.M4;\n  var b = [0.5, 0.5, 0.5, 0.5],\n      mi = 0,\n      tmi = 0;\n  if (N != 0) for (var i = 0; i < 10; i++) {\n    b = M.multVec(A, b);\n    tmi = Math.sqrt(M.dot(b, b));\n    b = M.sml(1 / tmi, b);\n    if (Math.abs(tmi - mi) < 1e-9) break;\n    mi = tmi;\n  } //b = [0,0,1,0];  mi=N;\n\n  var q = [m0 * iN, m1 * iN, m2 * iN, m3 * iN];\n  var eMq255 = M.dot(M.sml(255, q), b);\n  return {\n    Cov: Rj,\n    q: q,\n    e: b,\n    L: mi,\n    eMq255: eMq255,\n    eMq: M.dot(b, q),\n    rgba: (Math.round(255 * q[3]) << 24 | Math.round(255 * q[2]) << 16 | Math.round(255 * q[1]) << 8 | Math.round(255 * q[0]) << 0) >>> 0\n  };\n};\n\nUPNG.M4 = {\n  multVec: function (m, v) {\n    return [m[0] * v[0] + m[1] * v[1] + m[2] * v[2] + m[3] * v[3], m[4] * v[0] + m[5] * v[1] + m[6] * v[2] + m[7] * v[3], m[8] * v[0] + m[9] * v[1] + m[10] * v[2] + m[11] * v[3], m[12] * v[0] + m[13] * v[1] + m[14] * v[2] + m[15] * v[3]];\n  },\n  dot: function (x, y) {\n    return x[0] * y[0] + x[1] * y[1] + x[2] * y[2] + x[3] * y[3];\n  },\n  sml: function (a, y) {\n    return [a * y[0], a * y[1], a * y[2], a * y[3]];\n  }\n};\n\nUPNG.encode.concatRGBA = function (bufs) {\n  var tlen = 0;\n\n  for (var i = 0; i < bufs.length; i++) tlen += bufs[i].byteLength;\n\n  var nimg = new Uint8Array(tlen),\n      noff = 0;\n\n  for (var i = 0; i < bufs.length; i++) {\n    var img = new Uint8Array(bufs[i]),\n        il = img.length;\n\n    for (var j = 0; j < il; j += 4) {\n      var r = img[j],\n          g = img[j + 1],\n          b = img[j + 2],\n          a = img[j + 3];\n      if (a == 0) r = g = b = 0;\n      nimg[noff + j] = r;\n      nimg[noff + j + 1] = g;\n      nimg[noff + j + 2] = b;\n      nimg[noff + j + 3] = a;\n    }\n\n    noff += il;\n  }\n\n  return nimg.buffer;\n};\n\nvar _default = UPNG;\nexports[\"default\"] = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../node_modules/.pnpm/@pdf-lib+upng@1.0.1/node_modules/@pdf-lib/upng/cjs/UPNG.js\n");

/***/ })

};
;